{"version":3,"sources":["webpack://recreateTransform/webpack/universalModuleDefinition","webpack://recreateTransform/webpack/bootstrap","webpack://recreateTransform/./node_modules/rfc6902/index.js","webpack://recreateTransform/./node_modules/diff/dist/diff.js","webpack://recreateTransform/./node_modules/rfc6902/pointer.js","webpack://recreateTransform/./node_modules/rfc6902/equal.js","webpack://recreateTransform/./node_modules/rfc6902/patch.js","webpack://recreateTransform/./node_modules/rfc6902/util.js","webpack://recreateTransform/./node_modules/rfc6902/diff.js","webpack://recreateTransform/./node_modules/prosemirror-model/src/fragment.js","webpack://recreateTransform/./node_modules/prosemirror-model/src/diff.js","webpack://recreateTransform/./node_modules/prosemirror-model/src/comparedeep.js","webpack://recreateTransform/./node_modules/prosemirror-model/src/mark.js","webpack://recreateTransform/./node_modules/prosemirror-model/src/replace.js","webpack://recreateTransform/./node_modules/prosemirror-model/src/node.js","webpack://recreateTransform/./node_modules/orderedmap/index.es.js","webpack://recreateTransform/./node_modules/prosemirror-model/src/content.js","webpack://recreateTransform/./node_modules/prosemirror-model/src/schema.js","webpack://recreateTransform/./node_modules/prosemirror-transform/dist/index.es.js","webpack://recreateTransform/./src/recreateTransform.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","pointer_1","patch_1","diff_1","createTest","input","path","endpoint","Pointer","fromJSON","evaluate","undefined","op","applyPatch","patch","map","operation","apply","createPatch","output","diff","ptr","wrappedDiff","custom_patch","Array","isArray","diffAny","wrapVoidableDiff","createTests","tests","filter","isDestructive","forEach","pathTest","push","fromTest","from","Diff","buildValues","components","newString","oldString","useLongestToken","componentPos","componentLen","length","newPos","oldPos","component","removed","join","slice","count","added","tmp","oldValue","lastComponent","equals","pop","clonePath","options","arguments","callback","this","self","done","setTimeout","castInput","removeEmpty","tokenize","newLen","oldLen","editLength","maxEditLength","bestPath","extractCommon","execEditLength","diagonalPath","basePath","addPath","removePath","_oldPos","canAdd","canRemove","pushComponent","exec","ret","last","commonCount","left","right","comparator","ignoreCase","toLowerCase","array","split","chars","characterDiff","generateOptions","defaults","extendedWordChars","reWhitespace","wordDiff","ignoreWhitespace","test","tokens","splice","lineDiff","diffLines","oldStr","newStr","retLines","linesAndNewlines","line","newlineIsToken","trim","sentenceDiff","cssDiff","_typeof","obj","iterator","constructor","_toConsumableArray","arr","arr2","_arrayWithoutHoles","iter","toString","_iterableToArray","TypeError","_nonIterableSpread","objectPrototypeToString","jsonDiff","canonicalize","stack","replacementStack","replacer","canonicalizedObj","toJSON","_key","sortedKeys","sort","_this$options","undefinedReplacement","_this$options$stringi","stringifyReplacer","k","v","JSON","stringify","replace","arrayDiff","parsePatch","uniDiff","diffstr","delimiters","match","list","parseIndex","index","header","parseFileHeader","hunks","_line","parseHunk","strict","Error","fileHeader","keyPrefix","data","fileName","substr","chunkHeaderIndex","chunkHeader","hunk","oldStart","oldLines","newStart","newLines","lines","linedelimiters","addCount","removeCount","indexOf","distanceIterator","start","minLine","maxLine","wantForward","backwardExhausted","forwardExhausted","localOffset","source","removeEOFNL","addEOFNL","compareLine","lineNumber","patchContent","errorCount","fuzzFactor","offset","hunkFits","toPos","j","content","diffOffset","_i","_hunk","_toPos","delimiter","previousOperation","_k","structuredPatch","oldFileName","newFileName","oldHeader","newHeader","context","contextLines","entry","oldRangeStart","newRangeStart","curRange","oldLine","newLine","_loop","current","_curRange","prev","_curRange2","_curRange3","contextSize","Math","min","oldEOFNewline","newEOFNewline","noNlBeforeAdds","createTwoFilesPatch","arrayStartsWith","calcLineCount","_calcOldNewLineCount","calcOldNewLineCount","myCount","mine","theirCount","theirs","loadPatch","param","base","fileNameChanged","selectField","conflict","hunkBefore","check","cloneHunk","mergeLines","mineOffset","mineLines","theirOffset","theirLines","their","insertLeading","mineCurrent","theirCurrent","_hunk$lines","collectChange","_hunk$lines2","removal","mutualChange","insertTrailing","a","b","myChanges","theirChanges","allRemoves","_hunk$lines3","_hunk$lines4","skipRemoveSuperset","_hunk$lines5","swap","_hunk$lines6","state","matchChanges","changes","merged","matchIndex","contextChanges","conflicted","change","collectContext","insert","reduce","removeChanges","delta","changeContent","diffChars","diffWords","diffWordsWithSpace","diffTrimmedLines","diffSentences","diffCss","diffJson","oldObj","newObj","diffArrays","oldArr","newArr","applyPatches","currentIndex","processIndex","complete","loadFile","err","updatedContent","patched","merge","mineIndex","theirsIndex","theirsOffset","Infinity","theirsCurrent","mergedHunk","convertChangesToDMP","convertChangesToXML","unescape","token","escape","parent","set","cursor","add","concat","String","objectType","compare","left_type","right_type","compareArrays","left_keys","keys","right_keys","compareObjects","extendStatics","__extends","setPrototypeOf","__proto__","__","util_1","equal_1","MissingError","_super","_this","TestError","actual","expected","_add","parseInt","_remove","clone","remove","move","from_endpoint","copy","InvalidOperationError","length_1","arrayTarget","objectTarget","subtract","minuend","subtrahend","add_key","del_key","intersection","objects","counter","appendArrayOperation","operations","cost","memo","input_length","isNaN","output_length","dist","memo_key","memoized","alternatives","remove_base","remove_operation","add_base","add_operation","replace_base","replace_operation","original","_a","array_operation","padding","isArrayAdd","padded_index","index_token","isArrayRemove","replace_ptr","replace_operations","diffObjects","diffValues","input_type","output_type","size","nodeSize","to","f","nodeStart","pos","child","end","nodesBetween","max","blockSeparator","leafText","text","separated","node","isText","isLeaf","isBlock","other","lastChild","first","firstChild","sameMarkup","withText","result","cut","empty","eq","found","RangeError","findDiffStart","childCount","childA","childB","inner","otherPos","findDiffEnd","posA","posB","iA","iB","same","minSize","round","retIndex","curPos","toStringInner","schema","nodeFromJSON","joined","nodes","fromArray","attrs","compareDeep","type","placed","excludes","rank","_","json","marks","none","ReplaceError","message","openStart","openEnd","fragment","insertInto","findIndex","maybeChild","canReplace","append","replaceChild","removeRange","indexTo","offsetTo","openIsolating","spec","isolating","OrderedMap","find","update","newKey","addToStart","addToEnd","addBefore","place","without","prepend","prop","validEnd","next","wrapCache","string","nodeTypes","stream","TokenStream","expr","parseExpr","nfa","labeled","explore","states","out","term","known","nullFrom","cmp","dfa","connect","compile","exprs","loop","edge","cur","edges","work","dead","hasRequiredAttrs","checkForDeadEnds","frag","matchType","isInline","after","toEnd","startIndex","seen","search","types","finished","matchFragment","tp","createAndFill","target","computed","computeWrapping","active","via","shift","reverse","contentMatch","scan","inline","unshift","tok","str","SyntaxError","parseExprSeq","eat","parseExprSubscript","typeName","groups","resolveName","parseExprAtom","parseExprRange","parseNum","Number","defaultAttrs","attrName","attr","hasDefault","default","computeAttrs","built","given","initAttrs","Attribute","excluded","instance","factor16","pow","recoverIndex","MapResult","deleted","recover","StepMap","ranges","inverted","recoverOffset","mapResult","assoc","_map","simple","oldIndex","newIndex","oldSize","newSize","touches","invert","Mapping","maps","mirror","TransformError","appendMap","mirrors","setMirror","appendMapping","mapping","startSize","mirr","getMirror","appendMappingInverted","totalSize","inverse","recoverables","rec","corr","Transform","doc","steps","docs","prototypeAccessors","before","configurable","docChanged","mustOverride","step","maybeStep","failed","addStep","getMap","defineProperties","stepsByID","_doc","_mapping","_other","stepType","jsonID","id","stepClass","StepResult","ok","fail","fromReplace","e","Step","ReplaceStep","structure","contentBetween","slice$1","ReplaceAroundStep","gapFrom","gapTo","gap","inserted","insertAt","removeBetween","$from","resolve","depth","indexAfter","mapFragment","mapped","lift","range","$to","gapStart","gapEnd","splitting","d$1","splitting$1","wrap","wrappers","setBlockType","this$1","isTextblock","mapFrom","hasMarkup","$pos","canReplaceWith","canChangeType","clearIncompatible","startM","endM","setNodeMarkup","nodeAt","newNode","replaceWith","validContent","typesAfter","typeAfter","AddMarkStep","mark","oldSlice","sharedDepth","allowsMarkType","addToSet","markFromJSON","RemoveMarkStep","removeFromSet","replaceStep","fitsTrivially","fittedLeft","ref","fitLeftInner","placedBelow","placedHere","contentMatchAt","fillBefore","fitLeft","frontier","pass","placeSlice","open","closeNode","fitted","fitRight","nodeRight","allowsMarks","canMoveText","fittedAfter","fitRightJoin","matchCount","parentNode","toNode","cutByIndex","joinable$1","toIndex","compatibleContent","joinable","closed","fitRightClosed","fitRightSeparate","fill","normalizeSlice","addMark","removing","adding","isInSet","newSet","removeMark","matched","toRemove","style","found$1","parentType","delSteps","allowed","i$1","delete","wrapper","closeNodeStart","closeFragment","oldOpen","newOpen","coveredDepths","placeContent","single","findWrapping","w","ch","addNode","allowedMarks","closeNodeEnd","replaceRange","deleteRange","targetDepths","preferredTarget","defining","preferredTargetIndex","leftNodes","preferredDepth","openDepth","targetDepth","expand","startSteps","i$2","replaceRangeWith","point","nodeType","parentOffset","index$1","insertPoint","covered","cp","parse","getReplaceStep","fromDoc","toDoc","endA","endB","overlap","assign","complexSteps","wordDiffs","tr","currentJSON","marklessDoc","finalJSON","ops","recreateChangeContentSteps","recreateChangeMarkSteps","simplifyTr","afterStepJSON","pathParts","error","includes","addSetNodeMarkup","addReplaceTextSteps","addReplaceStep","descendants","tNode","tPos","fNode","fPos","nodeMark","fromNode","op1","op2","afterOP1JSON","afterOP2JSON","op1Doc","op2Doc","finalText","currentText","textDiffs","nextDiff","newTr","oldSteps","addedStep","recreateTransform","init"],"mappings":"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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"recreateTransform\"] = factory();\n\telse\n\t\troot[\"recreateTransform\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pointer_1 = require(\"./pointer\");\nvar patch_1 = require(\"./patch\");\nvar diff_1 = require(\"./diff\");\n/**\nApply a 'application/json-patch+json'-type patch to an object.\n\n`patch` *must* be an array of operations.\n\n> Operation objects MUST have exactly one \"op\" member, whose value\n> indicates the operation to perform.  Its value MUST be one of \"add\",\n> \"remove\", \"replace\", \"move\", \"copy\", or \"test\"; other values are\n> errors.\n\nThis method mutates the target object in-place.\n\n@returns list of results, one for each operation: `null` indicated success,\n         otherwise, the result will be an instance of one of the Error classes:\n         MissingError, InvalidOperationError, or TestError.\n*/\nfunction applyPatch(object, patch) {\n    return patch.map(function (operation) { return patch_1.apply(object, operation); });\n}\nexports.applyPatch = applyPatch;\nfunction wrapVoidableDiff(diff) {\n    function wrappedDiff(input, output, ptr) {\n        var custom_patch = diff(input, output, ptr);\n        // ensure an array is always returned\n        return Array.isArray(custom_patch) ? custom_patch : diff_1.diffAny(input, output, ptr, wrappedDiff);\n    }\n    return wrappedDiff;\n}\n/**\nProduce a 'application/json-patch+json'-type patch to get from one object to\nanother.\n\nThis does not alter `input` or `output` unless they have a property getter with\nside-effects (which is not a good idea anyway).\n\n`diff` is called on each pair of comparable non-primitive nodes in the\n`input`/`output` object trees, producing nested patches. Return `undefined`\nto fall back to default behaviour.\n\nReturns list of operations to perform on `input` to produce `output`.\n*/\nfunction createPatch(input, output, diff) {\n    var ptr = new pointer_1.Pointer();\n    // a new Pointer gets a default path of [''] if not specified\n    return (diff ? wrapVoidableDiff(diff) : diff_1.diffAny)(input, output, ptr);\n}\nexports.createPatch = createPatch;\n/**\nCreate a test operation based on `input`'s current evaluation of the JSON\nPointer `path`; if such a pointer cannot be resolved, returns undefined.\n*/\nfunction createTest(input, path) {\n    var endpoint = pointer_1.Pointer.fromJSON(path).evaluate(input);\n    if (endpoint !== undefined) {\n        return { op: 'test', path: path, value: endpoint.value };\n    }\n}\n/**\nProduce an 'application/json-patch+json'-type list of tests, to verify that\nexisting values in an object are identical to the those captured at some\ncheckpoint (whenever this function is called).\n\nThis does not alter `input` or `output` unless they have a property getter with\nside-effects (which is not a good idea anyway).\n\nReturns list of test operations.\n*/\nfunction createTests(input, patch) {\n    var tests = new Array();\n    patch.filter(diff_1.isDestructive).forEach(function (operation) {\n        var pathTest = createTest(input, operation.path);\n        if (pathTest)\n            tests.push(pathTest);\n        if ('from' in operation) {\n            var fromTest = createTest(input, operation.from);\n            if (fromTest)\n                tests.push(fromTest);\n        }\n    });\n    return tests;\n}\nexports.createTests = createTests;\n","/*!\n\n diff v4.0.1\n\nSoftware License Agreement (BSD License)\n\nCopyright (c) 2009-2015, Kevin Decker <kpdecker@gmail.com>\n\nAll rights reserved.\n\nRedistribution and use of this software in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above\n  copyright notice, this list of conditions and the\n  following disclaimer.\n\n* Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the\n  following disclaimer in the documentation and/or other\n  materials provided with the distribution.\n\n* Neither the name of Kevin Decker nor the names of its\n  contributors may be used to endorse or promote products\n  derived from this software without specific prior\n  written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\nIN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\nOF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n@license\n*/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.Diff = {}));\n}(this, function (exports) { 'use strict';\n\n  function Diff() {}\n  Diff.prototype = {\n    diff: function diff(oldString, newString) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var callback = options.callback;\n\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      this.options = options;\n      var self = this;\n\n      function done(value) {\n        if (callback) {\n          setTimeout(function () {\n            callback(undefined, value);\n          }, 0);\n          return true;\n        } else {\n          return value;\n        }\n      } // Allow subclasses to massage the input prior to running\n\n\n      oldString = this.castInput(oldString);\n      newString = this.castInput(newString);\n      oldString = this.removeEmpty(this.tokenize(oldString));\n      newString = this.removeEmpty(this.tokenize(newString));\n      var newLen = newString.length,\n          oldLen = oldString.length;\n      var editLength = 1;\n      var maxEditLength = newLen + oldLen;\n      var bestPath = [{\n        newPos: -1,\n        components: []\n      }]; // Seed editLength = 0, i.e. the content starts with the same values\n\n      var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n\n      if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n        // Identity per the equality and tokenizer\n        return done([{\n          value: this.join(newString),\n          count: newString.length\n        }]);\n      } // Main worker method. checks all permutations of a given edit length for acceptance.\n\n\n      function execEditLength() {\n        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n          var basePath = void 0;\n\n          var addPath = bestPath[diagonalPath - 1],\n              removePath = bestPath[diagonalPath + 1],\n              _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n\n          if (addPath) {\n            // No one else is going to attempt to use this value, clear it\n            bestPath[diagonalPath - 1] = undefined;\n          }\n\n          var canAdd = addPath && addPath.newPos + 1 < newLen,\n              canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;\n\n          if (!canAdd && !canRemove) {\n            // If this path is a terminal then prune\n            bestPath[diagonalPath] = undefined;\n            continue;\n          } // Select the diagonal that we want to branch from. We select the prior\n          // path whose position in the new string is the farthest from the origin\n          // and does not pass the bounds of the diff graph\n\n\n          if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {\n            basePath = clonePath(removePath);\n            self.pushComponent(basePath.components, undefined, true);\n          } else {\n            basePath = addPath; // No need to clone, we've pulled it from the list\n\n            basePath.newPos++;\n            self.pushComponent(basePath.components, true, undefined);\n          }\n\n          _oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath); // If we have hit the end of both strings, then we are done\n\n          if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {\n            return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));\n          } else {\n            // Otherwise track this path as a potential candidate and continue.\n            bestPath[diagonalPath] = basePath;\n          }\n        }\n\n        editLength++;\n      } // Performs the length of edit iteration. Is a bit fugly as this has to support the\n      // sync and async mode which is never fun. Loops over execEditLength until a value\n      // is produced.\n\n\n      if (callback) {\n        (function exec() {\n          setTimeout(function () {\n            // This should not happen, but we want to be safe.\n\n            /* istanbul ignore next */\n            if (editLength > maxEditLength) {\n              return callback();\n            }\n\n            if (!execEditLength()) {\n              exec();\n            }\n          }, 0);\n        })();\n      } else {\n        while (editLength <= maxEditLength) {\n          var ret = execEditLength();\n\n          if (ret) {\n            return ret;\n          }\n        }\n      }\n    },\n    pushComponent: function pushComponent(components, added, removed) {\n      var last = components[components.length - 1];\n\n      if (last && last.added === added && last.removed === removed) {\n        // We need to clone here as the component clone operation is just\n        // as shallow array clone\n        components[components.length - 1] = {\n          count: last.count + 1,\n          added: added,\n          removed: removed\n        };\n      } else {\n        components.push({\n          count: 1,\n          added: added,\n          removed: removed\n        });\n      }\n    },\n    extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {\n      var newLen = newString.length,\n          oldLen = oldString.length,\n          newPos = basePath.newPos,\n          oldPos = newPos - diagonalPath,\n          commonCount = 0;\n\n      while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n        newPos++;\n        oldPos++;\n        commonCount++;\n      }\n\n      if (commonCount) {\n        basePath.components.push({\n          count: commonCount\n        });\n      }\n\n      basePath.newPos = newPos;\n      return oldPos;\n    },\n    equals: function equals(left, right) {\n      if (this.options.comparator) {\n        return this.options.comparator(left, right);\n      } else {\n        return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();\n      }\n    },\n    removeEmpty: function removeEmpty(array) {\n      var ret = [];\n\n      for (var i = 0; i < array.length; i++) {\n        if (array[i]) {\n          ret.push(array[i]);\n        }\n      }\n\n      return ret;\n    },\n    castInput: function castInput(value) {\n      return value;\n    },\n    tokenize: function tokenize(value) {\n      return value.split('');\n    },\n    join: function join(chars) {\n      return chars.join('');\n    }\n  };\n\n  function buildValues(diff, components, newString, oldString, useLongestToken) {\n    var componentPos = 0,\n        componentLen = components.length,\n        newPos = 0,\n        oldPos = 0;\n\n    for (; componentPos < componentLen; componentPos++) {\n      var component = components[componentPos];\n\n      if (!component.removed) {\n        if (!component.added && useLongestToken) {\n          var value = newString.slice(newPos, newPos + component.count);\n          value = value.map(function (value, i) {\n            var oldValue = oldString[oldPos + i];\n            return oldValue.length > value.length ? oldValue : value;\n          });\n          component.value = diff.join(value);\n        } else {\n          component.value = diff.join(newString.slice(newPos, newPos + component.count));\n        }\n\n        newPos += component.count; // Common case\n\n        if (!component.added) {\n          oldPos += component.count;\n        }\n      } else {\n        component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\n        oldPos += component.count; // Reverse add and remove so removes are output first to match common convention\n        // The diffing algorithm is tied to add then remove output and this is the simplest\n        // route to get the desired output with minimal overhead.\n\n        if (componentPos && components[componentPos - 1].added) {\n          var tmp = components[componentPos - 1];\n          components[componentPos - 1] = components[componentPos];\n          components[componentPos] = tmp;\n        }\n      }\n    } // Special case handle for when one terminal is ignored (i.e. whitespace).\n    // For this case we merge the terminal into the prior string and drop the change.\n    // This is only available for string mode.\n\n\n    var lastComponent = components[componentLen - 1];\n\n    if (componentLen > 1 && typeof lastComponent.value === 'string' && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {\n      components[componentLen - 2].value += lastComponent.value;\n      components.pop();\n    }\n\n    return components;\n  }\n\n  function clonePath(path) {\n    return {\n      newPos: path.newPos,\n      components: path.components.slice(0)\n    };\n  }\n\n  var characterDiff = new Diff();\n  function diffChars(oldStr, newStr, options) {\n    return characterDiff.diff(oldStr, newStr, options);\n  }\n\n  function generateOptions(options, defaults) {\n    if (typeof options === 'function') {\n      defaults.callback = options;\n    } else if (options) {\n      for (var name in options) {\n        /* istanbul ignore else */\n        if (options.hasOwnProperty(name)) {\n          defaults[name] = options[name];\n        }\n      }\n    }\n\n    return defaults;\n  }\n\n  //\n  // Ranges and exceptions:\n  // Latin-1 Supplement, 0080–00FF\n  //  - U+00D7  × Multiplication sign\n  //  - U+00F7  ÷ Division sign\n  // Latin Extended-A, 0100–017F\n  // Latin Extended-B, 0180–024F\n  // IPA Extensions, 0250–02AF\n  // Spacing Modifier Letters, 02B0–02FF\n  //  - U+02C7  ˇ &#711;  Caron\n  //  - U+02D8  ˘ &#728;  Breve\n  //  - U+02D9  ˙ &#729;  Dot Above\n  //  - U+02DA  ˚ &#730;  Ring Above\n  //  - U+02DB  ˛ &#731;  Ogonek\n  //  - U+02DC  ˜ &#732;  Small Tilde\n  //  - U+02DD  ˝ &#733;  Double Acute Accent\n  // Latin Extended Additional, 1E00–1EFF\n\n  var extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\n  var reWhitespace = /\\S/;\n  var wordDiff = new Diff();\n\n  wordDiff.equals = function (left, right) {\n    if (this.options.ignoreCase) {\n      left = left.toLowerCase();\n      right = right.toLowerCase();\n    }\n\n    return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\n  };\n\n  wordDiff.tokenize = function (value) {\n    var tokens = value.split(/(\\s+|[()[\\]{}'\"]|\\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n\n    for (var i = 0; i < tokens.length - 1; i++) {\n      // If we have an empty string in the next field and we have only word chars before and after, merge\n      if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\n        tokens[i] += tokens[i + 2];\n        tokens.splice(i + 1, 2);\n        i--;\n      }\n    }\n\n    return tokens;\n  };\n\n  function diffWords(oldStr, newStr, options) {\n    options = generateOptions(options, {\n      ignoreWhitespace: true\n    });\n    return wordDiff.diff(oldStr, newStr, options);\n  }\n  function diffWordsWithSpace(oldStr, newStr, options) {\n    return wordDiff.diff(oldStr, newStr, options);\n  }\n\n  var lineDiff = new Diff();\n\n  lineDiff.tokenize = function (value) {\n    var retLines = [],\n        linesAndNewlines = value.split(/(\\n|\\r\\n)/); // Ignore the final empty token that occurs if the string ends with a new line\n\n    if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n      linesAndNewlines.pop();\n    } // Merge the content and line separators into single tokens\n\n\n    for (var i = 0; i < linesAndNewlines.length; i++) {\n      var line = linesAndNewlines[i];\n\n      if (i % 2 && !this.options.newlineIsToken) {\n        retLines[retLines.length - 1] += line;\n      } else {\n        if (this.options.ignoreWhitespace) {\n          line = line.trim();\n        }\n\n        retLines.push(line);\n      }\n    }\n\n    return retLines;\n  };\n\n  function diffLines(oldStr, newStr, callback) {\n    return lineDiff.diff(oldStr, newStr, callback);\n  }\n  function diffTrimmedLines(oldStr, newStr, callback) {\n    var options = generateOptions(callback, {\n      ignoreWhitespace: true\n    });\n    return lineDiff.diff(oldStr, newStr, options);\n  }\n\n  var sentenceDiff = new Diff();\n\n  sentenceDiff.tokenize = function (value) {\n    return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\n  };\n\n  function diffSentences(oldStr, newStr, callback) {\n    return sentenceDiff.diff(oldStr, newStr, callback);\n  }\n\n  var cssDiff = new Diff();\n\n  cssDiff.tokenize = function (value) {\n    return value.split(/([{}:;,]|\\s+)/);\n  };\n\n  function diffCss(oldStr, newStr, callback) {\n    return cssDiff.diff(oldStr, newStr, callback);\n  }\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  var objectPrototypeToString = Object.prototype.toString;\n  var jsonDiff = new Diff(); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n  // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\n\n  jsonDiff.useLongestToken = true;\n  jsonDiff.tokenize = lineDiff.tokenize;\n\n  jsonDiff.castInput = function (value) {\n    var _this$options = this.options,\n        undefinedReplacement = _this$options.undefinedReplacement,\n        _this$options$stringi = _this$options.stringifyReplacer,\n        stringifyReplacer = _this$options$stringi === void 0 ? function (k, v) {\n      return typeof v === 'undefined' ? undefinedReplacement : v;\n    } : _this$options$stringi;\n    return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');\n  };\n\n  jsonDiff.equals = function (left, right) {\n    return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\n  };\n\n  function diffJson(oldObj, newObj, options) {\n    return jsonDiff.diff(oldObj, newObj, options);\n  } // This function handles the presence of circular references by bailing out when encountering an\n  // object that is already on the \"stack\" of items being processed. Accepts an optional replacer\n\n  function canonicalize(obj, stack, replacementStack, replacer, key) {\n    stack = stack || [];\n    replacementStack = replacementStack || [];\n\n    if (replacer) {\n      obj = replacer(key, obj);\n    }\n\n    var i;\n\n    for (i = 0; i < stack.length; i += 1) {\n      if (stack[i] === obj) {\n        return replacementStack[i];\n      }\n    }\n\n    var canonicalizedObj;\n\n    if ('[object Array]' === objectPrototypeToString.call(obj)) {\n      stack.push(obj);\n      canonicalizedObj = new Array(obj.length);\n      replacementStack.push(canonicalizedObj);\n\n      for (i = 0; i < obj.length; i += 1) {\n        canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);\n      }\n\n      stack.pop();\n      replacementStack.pop();\n      return canonicalizedObj;\n    }\n\n    if (obj && obj.toJSON) {\n      obj = obj.toJSON();\n    }\n\n    if (_typeof(obj) === 'object' && obj !== null) {\n      stack.push(obj);\n      canonicalizedObj = {};\n      replacementStack.push(canonicalizedObj);\n\n      var sortedKeys = [],\n          _key;\n\n      for (_key in obj) {\n        /* istanbul ignore else */\n        if (obj.hasOwnProperty(_key)) {\n          sortedKeys.push(_key);\n        }\n      }\n\n      sortedKeys.sort();\n\n      for (i = 0; i < sortedKeys.length; i += 1) {\n        _key = sortedKeys[i];\n        canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);\n      }\n\n      stack.pop();\n      replacementStack.pop();\n    } else {\n      canonicalizedObj = obj;\n    }\n\n    return canonicalizedObj;\n  }\n\n  var arrayDiff = new Diff();\n\n  arrayDiff.tokenize = function (value) {\n    return value.slice();\n  };\n\n  arrayDiff.join = arrayDiff.removeEmpty = function (value) {\n    return value;\n  };\n\n  function diffArrays(oldArr, newArr, callback) {\n    return arrayDiff.diff(oldArr, newArr, callback);\n  }\n\n  function parsePatch(uniDiff) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var diffstr = uniDiff.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n        delimiters = uniDiff.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n        list = [],\n        i = 0;\n\n    function parseIndex() {\n      var index = {};\n      list.push(index); // Parse diff metadata\n\n      while (i < diffstr.length) {\n        var line = diffstr[i]; // File header found, end parsing diff metadata\n\n        if (/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/.test(line)) {\n          break;\n        } // Diff index\n\n\n        var header = /^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/.exec(line);\n\n        if (header) {\n          index.index = header[1];\n        }\n\n        i++;\n      } // Parse file headers if they are defined. Unified diff requires them, but\n      // there's no technical issues to have an isolated hunk without file header\n\n\n      parseFileHeader(index);\n      parseFileHeader(index); // Parse hunks\n\n      index.hunks = [];\n\n      while (i < diffstr.length) {\n        var _line = diffstr[i];\n\n        if (/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/.test(_line)) {\n          break;\n        } else if (/^@@/.test(_line)) {\n          index.hunks.push(parseHunk());\n        } else if (_line && options.strict) {\n          // Ignore unexpected content unless in strict mode\n          throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));\n        } else {\n          i++;\n        }\n      }\n    } // Parses the --- and +++ headers, if none are found, no lines\n    // are consumed.\n\n\n    function parseFileHeader(index) {\n      var fileHeader = /^(---|\\+\\+\\+)\\s+(.*)$/.exec(diffstr[i]);\n\n      if (fileHeader) {\n        var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';\n        var data = fileHeader[2].split('\\t', 2);\n        var fileName = data[0].replace(/\\\\\\\\/g, '\\\\');\n\n        if (/^\".*\"$/.test(fileName)) {\n          fileName = fileName.substr(1, fileName.length - 2);\n        }\n\n        index[keyPrefix + 'FileName'] = fileName;\n        index[keyPrefix + 'Header'] = (data[1] || '').trim();\n        i++;\n      }\n    } // Parses a hunk\n    // This assumes that we are at the start of a hunk.\n\n\n    function parseHunk() {\n      var chunkHeaderIndex = i,\n          chunkHeaderLine = diffstr[i++],\n          chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\n      var hunk = {\n        oldStart: +chunkHeader[1],\n        oldLines: +chunkHeader[2] || 1,\n        newStart: +chunkHeader[3],\n        newLines: +chunkHeader[4] || 1,\n        lines: [],\n        linedelimiters: []\n      };\n      var addCount = 0,\n          removeCount = 0;\n\n      for (; i < diffstr.length; i++) {\n        // Lines starting with '---' could be mistaken for the \"remove line\" operation\n        // But they could be the header for the next file. Therefore prune such cases out.\n        if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {\n          break;\n        }\n\n        var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];\n\n        if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\\\') {\n          hunk.lines.push(diffstr[i]);\n          hunk.linedelimiters.push(delimiters[i] || '\\n');\n\n          if (operation === '+') {\n            addCount++;\n          } else if (operation === '-') {\n            removeCount++;\n          } else if (operation === ' ') {\n            addCount++;\n            removeCount++;\n          }\n        } else {\n          break;\n        }\n      } // Handle the empty block count case\n\n\n      if (!addCount && hunk.newLines === 1) {\n        hunk.newLines = 0;\n      }\n\n      if (!removeCount && hunk.oldLines === 1) {\n        hunk.oldLines = 0;\n      } // Perform optional sanity checking\n\n\n      if (options.strict) {\n        if (addCount !== hunk.newLines) {\n          throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n        }\n\n        if (removeCount !== hunk.oldLines) {\n          throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n        }\n      }\n\n      return hunk;\n    }\n\n    while (i < diffstr.length) {\n      parseIndex();\n    }\n\n    return list;\n  }\n\n  // Iterator that traverses in the range of [min, max], stepping\n  // by distance from a given start position. I.e. for [0, 4], with\n  // start of 2, this will iterate 2, 3, 1, 4, 0.\n  function distanceIterator (start, minLine, maxLine) {\n    var wantForward = true,\n        backwardExhausted = false,\n        forwardExhausted = false,\n        localOffset = 1;\n    return function iterator() {\n      if (wantForward && !forwardExhausted) {\n        if (backwardExhausted) {\n          localOffset++;\n        } else {\n          wantForward = false;\n        } // Check if trying to fit beyond text length, and if not, check it fits\n        // after offset location (or desired location on first iteration)\n\n\n        if (start + localOffset <= maxLine) {\n          return localOffset;\n        }\n\n        forwardExhausted = true;\n      }\n\n      if (!backwardExhausted) {\n        if (!forwardExhausted) {\n          wantForward = true;\n        } // Check if trying to fit before text beginning, and if not, check it fits\n        // before offset location\n\n\n        if (minLine <= start - localOffset) {\n          return -localOffset++;\n        }\n\n        backwardExhausted = true;\n        return iterator();\n      } // We tried to fit hunk before text beginning and beyond text length, then\n      // hunk can't fit on the text. Return undefined\n\n    };\n  }\n\n  function applyPatch(source, uniDiff) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (typeof uniDiff === 'string') {\n      uniDiff = parsePatch(uniDiff);\n    }\n\n    if (Array.isArray(uniDiff)) {\n      if (uniDiff.length > 1) {\n        throw new Error('applyPatch only works with a single input.');\n      }\n\n      uniDiff = uniDiff[0];\n    } // Apply the diff to the input\n\n\n    var lines = source.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n        delimiters = source.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n        hunks = uniDiff.hunks,\n        compareLine = options.compareLine || function (lineNumber, line, operation, patchContent) {\n      return line === patchContent;\n    },\n        errorCount = 0,\n        fuzzFactor = options.fuzzFactor || 0,\n        minLine = 0,\n        offset = 0,\n        removeEOFNL,\n        addEOFNL;\n    /**\n     * Checks if the hunk exactly fits on the provided location\n     */\n\n\n    function hunkFits(hunk, toPos) {\n      for (var j = 0; j < hunk.lines.length; j++) {\n        var line = hunk.lines[j],\n            operation = line.length > 0 ? line[0] : ' ',\n            content = line.length > 0 ? line.substr(1) : line;\n\n        if (operation === ' ' || operation === '-') {\n          // Context sanity check\n          if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\n            errorCount++;\n\n            if (errorCount > fuzzFactor) {\n              return false;\n            }\n          }\n\n          toPos++;\n        }\n      }\n\n      return true;\n    } // Search best fit offsets for each hunk based on the previous ones\n\n\n    for (var i = 0; i < hunks.length; i++) {\n      var hunk = hunks[i],\n          maxLine = lines.length - hunk.oldLines,\n          localOffset = 0,\n          toPos = offset + hunk.oldStart - 1;\n      var iterator = distanceIterator(toPos, minLine, maxLine);\n\n      for (; localOffset !== undefined; localOffset = iterator()) {\n        if (hunkFits(hunk, toPos + localOffset)) {\n          hunk.offset = offset += localOffset;\n          break;\n        }\n      }\n\n      if (localOffset === undefined) {\n        return false;\n      } // Set lower text limit to end of the current hunk, so next ones don't try\n      // to fit over already patched text\n\n\n      minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\n    } // Apply patch hunks\n\n\n    var diffOffset = 0;\n\n    for (var _i = 0; _i < hunks.length; _i++) {\n      var _hunk = hunks[_i],\n          _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;\n\n      diffOffset += _hunk.newLines - _hunk.oldLines;\n\n      if (_toPos < 0) {\n        // Creating a new file\n        _toPos = 0;\n      }\n\n      for (var j = 0; j < _hunk.lines.length; j++) {\n        var line = _hunk.lines[j],\n            operation = line.length > 0 ? line[0] : ' ',\n            content = line.length > 0 ? line.substr(1) : line,\n            delimiter = _hunk.linedelimiters[j];\n\n        if (operation === ' ') {\n          _toPos++;\n        } else if (operation === '-') {\n          lines.splice(_toPos, 1);\n          delimiters.splice(_toPos, 1);\n          /* istanbul ignore else */\n        } else if (operation === '+') {\n          lines.splice(_toPos, 0, content);\n          delimiters.splice(_toPos, 0, delimiter);\n          _toPos++;\n        } else if (operation === '\\\\') {\n          var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;\n\n          if (previousOperation === '+') {\n            removeEOFNL = true;\n          } else if (previousOperation === '-') {\n            addEOFNL = true;\n          }\n        }\n      }\n    } // Handle EOFNL insertion/removal\n\n\n    if (removeEOFNL) {\n      while (!lines[lines.length - 1]) {\n        lines.pop();\n        delimiters.pop();\n      }\n    } else if (addEOFNL) {\n      lines.push('');\n      delimiters.push('\\n');\n    }\n\n    for (var _k = 0; _k < lines.length - 1; _k++) {\n      lines[_k] = lines[_k] + delimiters[_k];\n    }\n\n    return lines.join('');\n  } // Wrapper that supports multiple file patches via callbacks.\n\n  function applyPatches(uniDiff, options) {\n    if (typeof uniDiff === 'string') {\n      uniDiff = parsePatch(uniDiff);\n    }\n\n    var currentIndex = 0;\n\n    function processIndex() {\n      var index = uniDiff[currentIndex++];\n\n      if (!index) {\n        return options.complete();\n      }\n\n      options.loadFile(index, function (err, data) {\n        if (err) {\n          return options.complete(err);\n        }\n\n        var updatedContent = applyPatch(data, index, options);\n        options.patched(index, updatedContent, function (err) {\n          if (err) {\n            return options.complete(err);\n          }\n\n          processIndex();\n        });\n      });\n    }\n\n    processIndex();\n  }\n\n  function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof options.context === 'undefined') {\n      options.context = 4;\n    }\n\n    var diff = diffLines(oldStr, newStr, options);\n    diff.push({\n      value: '',\n      lines: []\n    }); // Append an empty value to make cleanup easier\n\n    function contextLines(lines) {\n      return lines.map(function (entry) {\n        return ' ' + entry;\n      });\n    }\n\n    var hunks = [];\n    var oldRangeStart = 0,\n        newRangeStart = 0,\n        curRange = [],\n        oldLine = 1,\n        newLine = 1;\n\n    var _loop = function _loop(i) {\n      var current = diff[i],\n          lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n      current.lines = lines;\n\n      if (current.added || current.removed) {\n        var _curRange;\n\n        // If we have previous context, start with that\n        if (!oldRangeStart) {\n          var prev = diff[i - 1];\n          oldRangeStart = oldLine;\n          newRangeStart = newLine;\n\n          if (prev) {\n            curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\n            oldRangeStart -= curRange.length;\n            newRangeStart -= curRange.length;\n          }\n        } // Output our changes\n\n\n        (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function (entry) {\n          return (current.added ? '+' : '-') + entry;\n        }))); // Track the updated file position\n\n\n        if (current.added) {\n          newLine += lines.length;\n        } else {\n          oldLine += lines.length;\n        }\n      } else {\n        // Identical context lines. Track line changes\n        if (oldRangeStart) {\n          // Close out any changes that have been output (or join overlapping)\n          if (lines.length <= options.context * 2 && i < diff.length - 2) {\n            var _curRange2;\n\n            // Overlapping\n            (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));\n          } else {\n            var _curRange3;\n\n            // end the range and output\n            var contextSize = Math.min(lines.length, options.context);\n\n            (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));\n\n            var hunk = {\n              oldStart: oldRangeStart,\n              oldLines: oldLine - oldRangeStart + contextSize,\n              newStart: newRangeStart,\n              newLines: newLine - newRangeStart + contextSize,\n              lines: curRange\n            };\n\n            if (i >= diff.length - 2 && lines.length <= options.context) {\n              // EOF is inside this hunk\n              var oldEOFNewline = /\\n$/.test(oldStr);\n              var newEOFNewline = /\\n$/.test(newStr);\n              var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;\n\n              if (!oldEOFNewline && noNlBeforeAdds) {\n                // special case: old has no eol and no trailing context; no-nl can end up before adds\n                curRange.splice(hunk.oldLines, 0, '\\\\ No newline at end of file');\n              }\n\n              if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {\n                curRange.push('\\\\ No newline at end of file');\n              }\n            }\n\n            hunks.push(hunk);\n            oldRangeStart = 0;\n            newRangeStart = 0;\n            curRange = [];\n          }\n        }\n\n        oldLine += lines.length;\n        newLine += lines.length;\n      }\n    };\n\n    for (var i = 0; i < diff.length; i++) {\n      _loop(i);\n    }\n\n    return {\n      oldFileName: oldFileName,\n      newFileName: newFileName,\n      oldHeader: oldHeader,\n      newHeader: newHeader,\n      hunks: hunks\n    };\n  }\n  function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n    var diff = structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options);\n    var ret = [];\n\n    if (oldFileName == newFileName) {\n      ret.push('Index: ' + oldFileName);\n    }\n\n    ret.push('===================================================================');\n    ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\\t' + diff.oldHeader));\n    ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\\t' + diff.newHeader));\n\n    for (var i = 0; i < diff.hunks.length; i++) {\n      var hunk = diff.hunks[i];\n      ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');\n      ret.push.apply(ret, hunk.lines);\n    }\n\n    return ret.join('\\n') + '\\n';\n  }\n  function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\n    return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\n  }\n\n  function arrayEqual(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    return arrayStartsWith(a, b);\n  }\n  function arrayStartsWith(array, start) {\n    if (start.length > array.length) {\n      return false;\n    }\n\n    for (var i = 0; i < start.length; i++) {\n      if (start[i] !== array[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function calcLineCount(hunk) {\n    var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines),\n        oldLines = _calcOldNewLineCount.oldLines,\n        newLines = _calcOldNewLineCount.newLines;\n\n    if (oldLines !== undefined) {\n      hunk.oldLines = oldLines;\n    } else {\n      delete hunk.oldLines;\n    }\n\n    if (newLines !== undefined) {\n      hunk.newLines = newLines;\n    } else {\n      delete hunk.newLines;\n    }\n  }\n  function merge(mine, theirs, base) {\n    mine = loadPatch(mine, base);\n    theirs = loadPatch(theirs, base);\n    var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.\n    // Leaving sanity checks on this to the API consumer that may know more about the\n    // meaning in their own context.\n\n    if (mine.index || theirs.index) {\n      ret.index = mine.index || theirs.index;\n    }\n\n    if (mine.newFileName || theirs.newFileName) {\n      if (!fileNameChanged(mine)) {\n        // No header or no change in ours, use theirs (and ours if theirs does not exist)\n        ret.oldFileName = theirs.oldFileName || mine.oldFileName;\n        ret.newFileName = theirs.newFileName || mine.newFileName;\n        ret.oldHeader = theirs.oldHeader || mine.oldHeader;\n        ret.newHeader = theirs.newHeader || mine.newHeader;\n      } else if (!fileNameChanged(theirs)) {\n        // No header or no change in theirs, use ours\n        ret.oldFileName = mine.oldFileName;\n        ret.newFileName = mine.newFileName;\n        ret.oldHeader = mine.oldHeader;\n        ret.newHeader = mine.newHeader;\n      } else {\n        // Both changed... figure it out\n        ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\n        ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\n        ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\n        ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\n      }\n    }\n\n    ret.hunks = [];\n    var mineIndex = 0,\n        theirsIndex = 0,\n        mineOffset = 0,\n        theirsOffset = 0;\n\n    while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {\n      var mineCurrent = mine.hunks[mineIndex] || {\n        oldStart: Infinity\n      },\n          theirsCurrent = theirs.hunks[theirsIndex] || {\n        oldStart: Infinity\n      };\n\n      if (hunkBefore(mineCurrent, theirsCurrent)) {\n        // This patch does not overlap with any of the others, yay.\n        ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\n        mineIndex++;\n        theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\n      } else if (hunkBefore(theirsCurrent, mineCurrent)) {\n        // This patch does not overlap with any of the others, yay.\n        ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\n        theirsIndex++;\n        mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\n      } else {\n        // Overlap, merge as best we can\n        var mergedHunk = {\n          oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\n          oldLines: 0,\n          newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\n          newLines: 0,\n          lines: []\n        };\n        mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\n        theirsIndex++;\n        mineIndex++;\n        ret.hunks.push(mergedHunk);\n      }\n    }\n\n    return ret;\n  }\n\n  function loadPatch(param, base) {\n    if (typeof param === 'string') {\n      if (/^@@/m.test(param) || /^Index:/m.test(param)) {\n        return parsePatch(param)[0];\n      }\n\n      if (!base) {\n        throw new Error('Must provide a base reference or pass in a patch');\n      }\n\n      return structuredPatch(undefined, undefined, base, param);\n    }\n\n    return param;\n  }\n\n  function fileNameChanged(patch) {\n    return patch.newFileName && patch.newFileName !== patch.oldFileName;\n  }\n\n  function selectField(index, mine, theirs) {\n    if (mine === theirs) {\n      return mine;\n    } else {\n      index.conflict = true;\n      return {\n        mine: mine,\n        theirs: theirs\n      };\n    }\n  }\n\n  function hunkBefore(test, check) {\n    return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;\n  }\n\n  function cloneHunk(hunk, offset) {\n    return {\n      oldStart: hunk.oldStart,\n      oldLines: hunk.oldLines,\n      newStart: hunk.newStart + offset,\n      newLines: hunk.newLines,\n      lines: hunk.lines\n    };\n  }\n\n  function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\n    // This will generally result in a conflicted hunk, but there are cases where the context\n    // is the only overlap where we can successfully merge the content here.\n    var mine = {\n      offset: mineOffset,\n      lines: mineLines,\n      index: 0\n    },\n        their = {\n      offset: theirOffset,\n      lines: theirLines,\n      index: 0\n    }; // Handle any leading content\n\n    insertLeading(hunk, mine, their);\n    insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.\n\n    while (mine.index < mine.lines.length && their.index < their.lines.length) {\n      var mineCurrent = mine.lines[mine.index],\n          theirCurrent = their.lines[their.index];\n\n      if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {\n        // Both modified ...\n        mutualChange(hunk, mine, their);\n      } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {\n        var _hunk$lines;\n\n        // Mine inserted\n        (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));\n      } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {\n        var _hunk$lines2;\n\n        // Theirs inserted\n        (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));\n      } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {\n        // Mine removed or edited\n        removal(hunk, mine, their);\n      } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {\n        // Their removed or edited\n        removal(hunk, their, mine, true);\n      } else if (mineCurrent === theirCurrent) {\n        // Context identity\n        hunk.lines.push(mineCurrent);\n        mine.index++;\n        their.index++;\n      } else {\n        // Context mismatch\n        conflict(hunk, collectChange(mine), collectChange(their));\n      }\n    } // Now push anything that may be remaining\n\n\n    insertTrailing(hunk, mine);\n    insertTrailing(hunk, their);\n    calcLineCount(hunk);\n  }\n\n  function mutualChange(hunk, mine, their) {\n    var myChanges = collectChange(mine),\n        theirChanges = collectChange(their);\n\n    if (allRemoves(myChanges) && allRemoves(theirChanges)) {\n      // Special case for remove changes that are supersets of one another\n      if (arrayStartsWith(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\n        var _hunk$lines3;\n\n        (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));\n\n        return;\n      } else if (arrayStartsWith(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\n        var _hunk$lines4;\n\n        (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));\n\n        return;\n      }\n    } else if (arrayEqual(myChanges, theirChanges)) {\n      var _hunk$lines5;\n\n      (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));\n\n      return;\n    }\n\n    conflict(hunk, myChanges, theirChanges);\n  }\n\n  function removal(hunk, mine, their, swap) {\n    var myChanges = collectChange(mine),\n        theirChanges = collectContext(their, myChanges);\n\n    if (theirChanges.merged) {\n      var _hunk$lines6;\n\n      (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));\n    } else {\n      conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\n    }\n  }\n\n  function conflict(hunk, mine, their) {\n    hunk.conflict = true;\n    hunk.lines.push({\n      conflict: true,\n      mine: mine,\n      theirs: their\n    });\n  }\n\n  function insertLeading(hunk, insert, their) {\n    while (insert.offset < their.offset && insert.index < insert.lines.length) {\n      var line = insert.lines[insert.index++];\n      hunk.lines.push(line);\n      insert.offset++;\n    }\n  }\n\n  function insertTrailing(hunk, insert) {\n    while (insert.index < insert.lines.length) {\n      var line = insert.lines[insert.index++];\n      hunk.lines.push(line);\n    }\n  }\n\n  function collectChange(state) {\n    var ret = [],\n        operation = state.lines[state.index][0];\n\n    while (state.index < state.lines.length) {\n      var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\n\n      if (operation === '-' && line[0] === '+') {\n        operation = '+';\n      }\n\n      if (operation === line[0]) {\n        ret.push(line);\n        state.index++;\n      } else {\n        break;\n      }\n    }\n\n    return ret;\n  }\n\n  function collectContext(state, matchChanges) {\n    var changes = [],\n        merged = [],\n        matchIndex = 0,\n        contextChanges = false,\n        conflicted = false;\n\n    while (matchIndex < matchChanges.length && state.index < state.lines.length) {\n      var change = state.lines[state.index],\n          match = matchChanges[matchIndex]; // Once we've hit our add, then we are done\n\n      if (match[0] === '+') {\n        break;\n      }\n\n      contextChanges = contextChanges || change[0] !== ' ';\n      merged.push(match);\n      matchIndex++; // Consume any additions in the other block as a conflict to attempt\n      // to pull in the remaining context after this\n\n      if (change[0] === '+') {\n        conflicted = true;\n\n        while (change[0] === '+') {\n          changes.push(change);\n          change = state.lines[++state.index];\n        }\n      }\n\n      if (match.substr(1) === change.substr(1)) {\n        changes.push(change);\n        state.index++;\n      } else {\n        conflicted = true;\n      }\n    }\n\n    if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {\n      conflicted = true;\n    }\n\n    if (conflicted) {\n      return changes;\n    }\n\n    while (matchIndex < matchChanges.length) {\n      merged.push(matchChanges[matchIndex++]);\n    }\n\n    return {\n      merged: merged,\n      changes: changes\n    };\n  }\n\n  function allRemoves(changes) {\n    return changes.reduce(function (prev, change) {\n      return prev && change[0] === '-';\n    }, true);\n  }\n\n  function skipRemoveSuperset(state, removeChanges, delta) {\n    for (var i = 0; i < delta; i++) {\n      var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\n\n      if (state.lines[state.index + i] !== ' ' + changeContent) {\n        return false;\n      }\n    }\n\n    state.index += delta;\n    return true;\n  }\n\n  function calcOldNewLineCount(lines) {\n    var oldLines = 0;\n    var newLines = 0;\n    lines.forEach(function (line) {\n      if (typeof line !== 'string') {\n        var myCount = calcOldNewLineCount(line.mine);\n        var theirCount = calcOldNewLineCount(line.theirs);\n\n        if (oldLines !== undefined) {\n          if (myCount.oldLines === theirCount.oldLines) {\n            oldLines += myCount.oldLines;\n          } else {\n            oldLines = undefined;\n          }\n        }\n\n        if (newLines !== undefined) {\n          if (myCount.newLines === theirCount.newLines) {\n            newLines += myCount.newLines;\n          } else {\n            newLines = undefined;\n          }\n        }\n      } else {\n        if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {\n          newLines++;\n        }\n\n        if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {\n          oldLines++;\n        }\n      }\n    });\n    return {\n      oldLines: oldLines,\n      newLines: newLines\n    };\n  }\n\n  // See: http://code.google.com/p/google-diff-match-patch/wiki/API\n  function convertChangesToDMP(changes) {\n    var ret = [],\n        change,\n        operation;\n\n    for (var i = 0; i < changes.length; i++) {\n      change = changes[i];\n\n      if (change.added) {\n        operation = 1;\n      } else if (change.removed) {\n        operation = -1;\n      } else {\n        operation = 0;\n      }\n\n      ret.push([operation, change.value]);\n    }\n\n    return ret;\n  }\n\n  function convertChangesToXML(changes) {\n    var ret = [];\n\n    for (var i = 0; i < changes.length; i++) {\n      var change = changes[i];\n\n      if (change.added) {\n        ret.push('<ins>');\n      } else if (change.removed) {\n        ret.push('<del>');\n      }\n\n      ret.push(escapeHTML(change.value));\n\n      if (change.added) {\n        ret.push('</ins>');\n      } else if (change.removed) {\n        ret.push('</del>');\n      }\n    }\n\n    return ret.join('');\n  }\n\n  function escapeHTML(s) {\n    var n = s;\n    n = n.replace(/&/g, '&amp;');\n    n = n.replace(/</g, '&lt;');\n    n = n.replace(/>/g, '&gt;');\n    n = n.replace(/\"/g, '&quot;');\n    return n;\n  }\n\n  /* See LICENSE file for terms of use */\n\n  exports.Diff = Diff;\n  exports.diffChars = diffChars;\n  exports.diffWords = diffWords;\n  exports.diffWordsWithSpace = diffWordsWithSpace;\n  exports.diffLines = diffLines;\n  exports.diffTrimmedLines = diffTrimmedLines;\n  exports.diffSentences = diffSentences;\n  exports.diffCss = diffCss;\n  exports.diffJson = diffJson;\n  exports.diffArrays = diffArrays;\n  exports.structuredPatch = structuredPatch;\n  exports.createTwoFilesPatch = createTwoFilesPatch;\n  exports.createPatch = createPatch;\n  exports.applyPatch = applyPatch;\n  exports.applyPatches = applyPatches;\n  exports.parsePatch = parsePatch;\n  exports.merge = merge;\n  exports.convertChangesToDMP = convertChangesToDMP;\n  exports.convertChangesToXML = convertChangesToXML;\n  exports.canonicalize = canonicalize;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\nUnescape token part of a JSON Pointer string\n\n`token` should *not* contain any '/' characters.\n\n> Evaluation of each reference token begins by decoding any escaped\n> character sequence.  This is performed by first transforming any\n> occurrence of the sequence '~1' to '/', and then transforming any\n> occurrence of the sequence '~0' to '~'.  By performing the\n> substitutions in this order, an implementation avoids the error of\n> turning '~01' first into '~1' and then into '/', which would be\n> incorrect (the string '~01' correctly becomes '~1' after\n> transformation).\n\nHere's my take:\n\n~1 is unescaped with higher priority than ~0 because it is a lower-order escape character.\nI say \"lower order\" because '/' needs escaping due to the JSON Pointer serialization technique.\nWhereas, '~' is escaped because escaping '/' uses the '~' character.\n*/\nfunction unescape(token) {\n    return token.replace(/~1/g, '/').replace(/~0/g, '~');\n}\n/** Escape token part of a JSON Pointer string\n\n> '~' needs to be encoded as '~0' and '/'\n> needs to be encoded as '~1' when these characters appear in a\n> reference token.\n\nThis is the exact inverse of `unescape()`, so the reverse replacements must take place in reverse order.\n*/\nfunction escape(token) {\n    return token.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n/**\nJSON Pointer representation\n*/\nvar Pointer = /** @class */ (function () {\n    function Pointer(tokens) {\n        if (tokens === void 0) { tokens = ['']; }\n        this.tokens = tokens;\n    }\n    /**\n    `path` *must* be a properly escaped string.\n    */\n    Pointer.fromJSON = function (path) {\n        var tokens = path.split('/').map(unescape);\n        if (tokens[0] !== '')\n            throw new Error(\"Invalid JSON Pointer: \" + path);\n        return new Pointer(tokens);\n    };\n    Pointer.prototype.toString = function () {\n        return this.tokens.map(escape).join('/');\n    };\n    /**\n    Returns an object with 'parent', 'key', and 'value' properties.\n    In the special case that this Pointer's path == \"\",\n    this object will be {parent: null, key: '', value: object}.\n    Otherwise, parent and key will have the property such that parent[key] == value.\n    */\n    Pointer.prototype.evaluate = function (object) {\n        var parent = null;\n        var key = '';\n        var value = object;\n        for (var i = 1, l = this.tokens.length; i < l; i++) {\n            parent = value;\n            key = this.tokens[i];\n            // not sure if this the best way to handle non-existant paths...\n            value = (parent || {})[key];\n        }\n        return { parent: parent, key: key, value: value };\n    };\n    Pointer.prototype.get = function (object) {\n        return this.evaluate(object).value;\n    };\n    Pointer.prototype.set = function (object, value) {\n        var cursor = object;\n        for (var i = 1, l = this.tokens.length - 1, token = this.tokens[i]; i < l; i++) {\n            // not sure if this the best way to handle non-existant paths...\n            cursor = (cursor || {})[token];\n        }\n        if (cursor) {\n            cursor[this.tokens[this.tokens.length - 1]] = value;\n        }\n    };\n    Pointer.prototype.push = function (token) {\n        // mutable\n        this.tokens.push(token);\n    };\n    /**\n    `token` should be a String. It'll be coerced to one anyway.\n  \n    immutable (shallowly)\n    */\n    Pointer.prototype.add = function (token) {\n        var tokens = this.tokens.concat(String(token));\n        return new Pointer(tokens);\n    };\n    return Pointer;\n}());\nexports.Pointer = Pointer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction objectType(object) {\n    if (object === undefined) {\n        return 'undefined';\n    }\n    if (object === null) {\n        return 'null';\n    }\n    if (Array.isArray(object)) {\n        return 'array';\n    }\n    return typeof object;\n}\nexports.objectType = objectType;\n/**\nEvaluate `left === right`, treating `left` and `right` as ordered lists.\n\n@returns true iff `left` and `right` have identical lengths, and every element\n         of `left` is equal to the corresponding element of `right`. Equality is\n         determined recursivly, via `compare`.\n*/\nfunction compareArrays(left, right) {\n    var length = left.length;\n    if (length !== right.length) {\n        return false;\n    }\n    for (var i = 0; i < length; i++) {\n        if (!compare(left[i], right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\nEvaluate `left === right`, treating `left` and `right` as property maps.\n\n@returns true iff every property in `left` has a value equal to the value of the\n         corresponding property in `right`, and vice-versa, stopping as soon as\n         possible. Equality is determined recursivly, via `compare`.\n*/\nfunction compareObjects(left, right) {\n    var left_keys = Object.keys(left);\n    var right_keys = Object.keys(right);\n    var length = left_keys.length;\n    // quick exit if the number of keys don't match up\n    if (length !== right_keys.length) {\n        return false;\n    }\n    // we don't know for sure that Set(left_keys) is equal to Set(right_keys),\n    // much less that their values in left and right are equal, but if right\n    // contains each key in left, we know it can't have any additional keys\n    for (var i = 0; i < length; i++) {\n        var key = left_keys[i];\n        if (!hasOwnProperty.call(right, key) || !compare(left[key], right[key])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n`compare()` returns true if `left` and `right` are materially equal\n(i.e., would produce equivalent JSON), false otherwise.\n\n> Here, \"equal\" means that the value at the target location and the\n> value conveyed by \"value\" are of the same JSON type, and that they\n> are considered equal by the following rules for that type:\n> o  strings: are considered equal if they contain the same number of\n>    Unicode characters and their code points are byte-by-byte equal.\n> o  numbers: are considered equal if their values are numerically\n>    equal.\n> o  arrays: are considered equal if they contain the same number of\n>    values, and if each value can be considered equal to the value at\n>    the corresponding position in the other array, using this list of\n>    type-specific rules.\n> o  objects: are considered equal if they contain the same number of\n>    members, and if each member can be considered equal to a member in\n>    the other object, by comparing their keys (as strings) and their\n>    values (using this list of type-specific rules).\n> o  literals (false, true, and null): are considered equal if they are\n>    the same.\n*/\nfunction compare(left, right) {\n    // strict equality handles literals, numbers, and strings (a sufficient but not necessary cause)\n    if (left === right) {\n        return true;\n    }\n    var left_type = objectType(left);\n    var right_type = objectType(right);\n    // check arrays\n    if (left_type == 'array' && right_type == 'array') {\n        return compareArrays(left, right);\n    }\n    // check objects\n    if (left_type == 'object' && right_type == 'object') {\n        return compareObjects(left, right);\n    }\n    // mismatched arrays & objects, etc., are always inequal\n    return false;\n}\nexports.compare = compare;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pointer_1 = require(\"./pointer\");\nvar util_1 = require(\"./util\");\nvar equal_1 = require(\"./equal\");\nvar MissingError = /** @class */ (function (_super) {\n    __extends(MissingError, _super);\n    function MissingError(path) {\n        var _this = _super.call(this, \"Value required at path: \" + path) || this;\n        _this.path = path;\n        _this.name = 'MissingError';\n        return _this;\n    }\n    return MissingError;\n}(Error));\nexports.MissingError = MissingError;\nvar TestError = /** @class */ (function (_super) {\n    __extends(TestError, _super);\n    function TestError(actual, expected) {\n        var _this = _super.call(this, \"Test failed: \" + actual + \" != \" + expected) || this;\n        _this.actual = actual;\n        _this.expected = expected;\n        _this.name = 'TestError';\n        _this.actual = actual;\n        _this.expected = expected;\n        return _this;\n    }\n    return TestError;\n}(Error));\nexports.TestError = TestError;\nfunction _add(object, key, value) {\n    if (Array.isArray(object)) {\n        // `key` must be an index\n        if (key == '-') {\n            object.push(value);\n        }\n        else {\n            var index = parseInt(key, 10);\n            object.splice(index, 0, value);\n        }\n    }\n    else {\n        object[key] = value;\n    }\n}\nfunction _remove(object, key) {\n    if (Array.isArray(object)) {\n        // '-' syntax doesn't make sense when removing\n        var index = parseInt(key, 10);\n        object.splice(index, 1);\n    }\n    else {\n        // not sure what the proper behavior is when path = ''\n        delete object[key];\n    }\n}\n/**\n>  o  If the target location specifies an array index, a new value is\n>     inserted into the array at the specified index.\n>  o  If the target location specifies an object member that does not\n>     already exist, a new member is added to the object.\n>  o  If the target location specifies an object member that does exist,\n>     that member's value is replaced.\n*/\nfunction add(object, operation) {\n    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n    // it's not exactly a \"MissingError\" in the same way that `remove` is -- more like a MissingParent, or something\n    if (endpoint.parent === undefined) {\n        return new MissingError(operation.path);\n    }\n    _add(endpoint.parent, endpoint.key, util_1.clone(operation.value));\n    return null;\n}\nexports.add = add;\n/**\n> The \"remove\" operation removes the value at the target location.\n> The target location MUST exist for the operation to be successful.\n*/\nfunction remove(object, operation) {\n    // endpoint has parent, key, and value properties\n    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n    if (endpoint.value === undefined) {\n        return new MissingError(operation.path);\n    }\n    // not sure what the proper behavior is when path = ''\n    _remove(endpoint.parent, endpoint.key);\n    return null;\n}\nexports.remove = remove;\n/**\n> The \"replace\" operation replaces the value at the target location\n> with a new value.  The operation object MUST contain a \"value\" member\n> whose content specifies the replacement value.\n> The target location MUST exist for the operation to be successful.\n\n> This operation is functionally identical to a \"remove\" operation for\n> a value, followed immediately by an \"add\" operation at the same\n> location with the replacement value.\n\nEven more simply, it's like the add operation with an existence check.\n*/\nfunction replace(object, operation) {\n    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n    if (endpoint.parent === null) {\n        return new MissingError(operation.path);\n    }\n    // this existence check treats arrays as a special case\n    if (Array.isArray(endpoint.parent)) {\n        if (parseInt(endpoint.key, 10) >= endpoint.parent.length) {\n            return new MissingError(operation.path);\n        }\n    }\n    else if (endpoint.value === undefined) {\n        return new MissingError(operation.path);\n    }\n    endpoint.parent[endpoint.key] = operation.value;\n    return null;\n}\nexports.replace = replace;\n/**\n> The \"move\" operation removes the value at a specified location and\n> adds it to the target location.\n> The operation object MUST contain a \"from\" member, which is a string\n> containing a JSON Pointer value that references the location in the\n> target document to move the value from.\n> This operation is functionally identical to a \"remove\" operation on\n> the \"from\" location, followed immediately by an \"add\" operation at\n> the target location with the value that was just removed.\n\n> The \"from\" location MUST NOT be a proper prefix of the \"path\"\n> location; i.e., a location cannot be moved into one of its children.\n\nTODO: throw if the check described in the previous paragraph fails.\n*/\nfunction move(object, operation) {\n    var from_endpoint = pointer_1.Pointer.fromJSON(operation.from).evaluate(object);\n    if (from_endpoint.value === undefined) {\n        return new MissingError(operation.from);\n    }\n    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n    if (endpoint.parent === undefined) {\n        return new MissingError(operation.path);\n    }\n    _remove(from_endpoint.parent, from_endpoint.key);\n    _add(endpoint.parent, endpoint.key, from_endpoint.value);\n    return null;\n}\nexports.move = move;\n/**\n> The \"copy\" operation copies the value at a specified location to the\n> target location.\n> The operation object MUST contain a \"from\" member, which is a string\n> containing a JSON Pointer value that references the location in the\n> target document to copy the value from.\n> The \"from\" location MUST exist for the operation to be successful.\n\n> This operation is functionally identical to an \"add\" operation at the\n> target location using the value specified in the \"from\" member.\n\nAlternatively, it's like 'move' without the 'remove'.\n*/\nfunction copy(object, operation) {\n    var from_endpoint = pointer_1.Pointer.fromJSON(operation.from).evaluate(object);\n    if (from_endpoint.value === undefined) {\n        return new MissingError(operation.from);\n    }\n    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n    if (endpoint.parent === undefined) {\n        return new MissingError(operation.path);\n    }\n    _add(endpoint.parent, endpoint.key, util_1.clone(from_endpoint.value));\n    return null;\n}\nexports.copy = copy;\n/**\n> The \"test\" operation tests that a value at the target location is\n> equal to a specified value.\n> The operation object MUST contain a \"value\" member that conveys the\n> value to be compared to the target location's value.\n> The target location MUST be equal to the \"value\" value for the\n> operation to be considered successful.\n*/\nfunction test(object, operation) {\n    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n    var result = equal_1.compare(endpoint.value, operation.value);\n    if (!result) {\n        return new TestError(endpoint.value, operation.value);\n    }\n    return null;\n}\nexports.test = test;\nvar InvalidOperationError = /** @class */ (function (_super) {\n    __extends(InvalidOperationError, _super);\n    function InvalidOperationError(operation) {\n        var _this = _super.call(this, \"Invalid operation: \" + operation.op) || this;\n        _this.operation = operation;\n        _this.name = 'InvalidOperationError';\n        return _this;\n    }\n    return InvalidOperationError;\n}(Error));\nexports.InvalidOperationError = InvalidOperationError;\n/**\nSwitch on `operation.op`, applying the corresponding patch function for each\ncase to `object`.\n*/\nfunction apply(object, operation) {\n    // not sure why TypeScript can't infer typesafety of:\n    //   {add, remove, replace, move, copy, test}[operation.op](object, operation)\n    // (seems like a bug)\n    switch (operation.op) {\n        case 'add': return add(object, operation);\n        case 'remove': return remove(object, operation);\n        case 'replace': return replace(object, operation);\n        case 'move': return move(object, operation);\n        case 'copy': return copy(object, operation);\n        case 'test': return test(object, operation);\n    }\n    return new InvalidOperationError(operation);\n}\nexports.apply = apply;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\nRecursively copy a value.\n\n@param source - should be a JavaScript primitive, Array, or (plain old) Object.\n@returns copy of source where every Array and Object have been recursively\n         reconstructed from their constituent elements\n*/\nfunction clone(source) {\n    // loose-equality checking for null is faster than strict checking for each of null/undefined/true/false\n    // checking null first, then calling typeof, is faster than vice-versa\n    if (source == null || typeof source != 'object') {\n        // short-circuiting is faster than a single return\n        return source;\n    }\n    // x.constructor == Array is the fastest way to check if x is an Array\n    if (source.constructor == Array) {\n        // construction via imperative for-loop is faster than source.map(arrayVsObject)\n        var length_1 = source.length;\n        // setting the Array length during construction is faster than just `[]` or `new Array()`\n        var arrayTarget = new Array(length_1);\n        for (var i = 0; i < length_1; i++) {\n            arrayTarget[i] = clone(source[i]);\n        }\n        return arrayTarget;\n    }\n    // Object\n    var objectTarget = {};\n    // declaring the variable (with const) inside the loop is faster\n    for (var key in source) {\n        // hasOwnProperty costs a bit of performance, but it's semantically necessary\n        // using a global helper is MUCH faster than calling source.hasOwnProperty(key)\n        if (hasOwnProperty.call(source, key)) {\n            objectTarget[key] = clone(source[key]);\n        }\n    }\n    return objectTarget;\n}\nexports.clone = clone;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar equal_1 = require(\"./equal\");\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction isDestructive(_a) {\n    var op = _a.op;\n    return op === 'remove' || op === 'replace' || op === 'copy' || op === 'move';\n}\nexports.isDestructive = isDestructive;\n/**\nList the keys in `minuend` that are not in `subtrahend`.\n\nA key is only considered if it is both 1) an own-property (o.hasOwnProperty(k))\nof the object, and 2) has a value that is not undefined. This is to match JSON\nsemantics, where JSON object serialization drops keys with undefined values.\n\n@param minuend Object of interest\n@param subtrahend Object of comparison\n@returns Array of keys that are in `minuend` but not in `subtrahend`.\n*/\nfunction subtract(minuend, subtrahend) {\n    // initialize empty object; we only care about the keys, the values can be anything\n    var obj = {};\n    // build up obj with all the properties of minuend\n    for (var add_key in minuend) {\n        if (hasOwnProperty.call(minuend, add_key) && minuend[add_key] !== undefined) {\n            obj[add_key] = 1;\n        }\n    }\n    // now delete all the properties of subtrahend from obj\n    // (deleting a missing key has no effect)\n    for (var del_key in subtrahend) {\n        if (hasOwnProperty.call(subtrahend, del_key) && subtrahend[del_key] !== undefined) {\n            delete obj[del_key];\n        }\n    }\n    // finally, extract whatever keys remain in obj\n    return Object.keys(obj);\n}\nexports.subtract = subtract;\n/**\nList the keys that shared by all `objects`.\n\nThe semantics of what constitutes a \"key\" is described in {@link subtract}.\n\n@param objects Array of objects to compare\n@returns Array of keys that are in (\"own-properties\" of) every object in `objects`.\n*/\nfunction intersection(objects) {\n    var length = objects.length;\n    // prepare empty counter to keep track of how many objects each key occurred in\n    var counter = {};\n    // go through each object and increment the counter for each key in that object\n    for (var i = 0; i < length; i++) {\n        var object = objects[i];\n        for (var key in object) {\n            if (hasOwnProperty.call(object, key) && object[key] !== undefined) {\n                counter[key] = (counter[key] || 0) + 1;\n            }\n        }\n    }\n    // now delete all keys from the counter that were not seen in every object\n    for (var key in counter) {\n        if (counter[key] < length) {\n            delete counter[key];\n        }\n    }\n    // finally, extract whatever keys remain in the counter\n    return Object.keys(counter);\n}\nexports.intersection = intersection;\nfunction isArrayAdd(array_operation) {\n    return array_operation.op === 'add';\n}\nfunction isArrayRemove(array_operation) {\n    return array_operation.op === 'remove';\n}\nfunction appendArrayOperation(base, operation) {\n    return {\n        // the new operation must be pushed on the end\n        operations: base.operations.concat(operation),\n        cost: base.cost + 1,\n    };\n}\n/**\nCalculate the shortest sequence of operations to get from `input` to `output`,\nusing a dynamic programming implementation of the Levenshtein distance algorithm.\n\nTo get from the input ABC to the output AZ we could just delete all the input\nand say \"insert A, insert Z\" and be done with it. That's what we do if the\ninput is empty. But we can be smarter.\n\n          output\n               A   Z\n               -   -\n          [0]  1   2\ninput A |  1  [0]  1\n      B |  2  [1]  1\n      C |  3   2  [2]\n\n1) start at 0,0 (+0)\n2) keep A (+0)\n3) remove B (+1)\n4) replace C with Z (+1)\n\nIf the `input` (source) is empty, they'll all be in the top row, resulting in an\narray of 'add' operations.\nIf the `output` (target) is empty, everything will be in the left column,\nresulting in an array of 'remove' operations.\n\n@returns A list of add/remove/replace operations.\n*/\nfunction diffArrays(input, output, ptr, diff) {\n    if (diff === void 0) { diff = diffAny; }\n    // set up cost matrix (very simple initialization: just a map)\n    var memo = {\n        '0,0': { operations: [], cost: 0 },\n    };\n    /**\n    Calculate the cheapest sequence of operations required to get from\n    input.slice(0, i) to output.slice(0, j).\n    There may be other valid sequences with the same cost, but none cheaper.\n  \n    @param i The row in the layout above\n    @param j The column in the layout above\n    @returns An object containing a list of operations, along with the total cost\n             of applying them (+1 for each add/remove/replace operation)\n    */\n    function dist(i, j) {\n        // memoized\n        var memo_key = i + \",\" + j;\n        var memoized = memo[memo_key];\n        if (memoized === undefined) {\n            if (i > 0 && j > 0 && equal_1.compare(input[i - 1], output[j - 1])) {\n                // equal (no operations => no cost)\n                memoized = dist(i - 1, j - 1);\n            }\n            else {\n                var alternatives = [];\n                if (i > 0) {\n                    // NOT topmost row\n                    var remove_base = dist(i - 1, j);\n                    var remove_operation = {\n                        op: 'remove',\n                        index: i - 1,\n                    };\n                    alternatives.push(appendArrayOperation(remove_base, remove_operation));\n                }\n                if (j > 0) {\n                    // NOT leftmost column\n                    var add_base = dist(i, j - 1);\n                    var add_operation = {\n                        op: 'add',\n                        index: i - 1,\n                        value: output[j - 1],\n                    };\n                    alternatives.push(appendArrayOperation(add_base, add_operation));\n                }\n                if (i > 0 && j > 0) {\n                    // TABLE MIDDLE\n                    // supposing we replaced it, compute the rest of the costs:\n                    var replace_base = dist(i - 1, j - 1);\n                    // okay, the general plan is to replace it, but we can be smarter,\n                    // recursing into the structure and replacing only part of it if\n                    // possible, but to do so we'll need the original value\n                    var replace_operation = {\n                        op: 'replace',\n                        index: i - 1,\n                        original: input[i - 1],\n                        value: output[j - 1],\n                    };\n                    alternatives.push(appendArrayOperation(replace_base, replace_operation));\n                }\n                // the only other case, i === 0 && j === 0, has already been memoized\n                // the meat of the algorithm:\n                // sort by cost to find the lowest one (might be several ties for lowest)\n                // [4, 6, 7, 1, 2].sort((a, b) => a - b) -> [ 1, 2, 4, 6, 7 ]\n                var best = alternatives.sort(function (a, b) { return a.cost - b.cost; })[0];\n                memoized = best;\n            }\n            memo[memo_key] = memoized;\n        }\n        return memoized;\n    }\n    // handle weird objects masquerading as Arrays that don't have proper length\n    // properties by using 0 for everything but positive numbers\n    var input_length = (isNaN(input.length) || input.length <= 0) ? 0 : input.length;\n    var output_length = (isNaN(output.length) || output.length <= 0) ? 0 : output.length;\n    var array_operations = dist(input_length, output_length).operations;\n    var padded_operations = array_operations.reduce(function (_a, array_operation) {\n        var operations = _a[0], padding = _a[1];\n        if (isArrayAdd(array_operation)) {\n            var padded_index = array_operation.index + 1 + padding;\n            var index_token = padded_index < (input_length + padding) ? String(padded_index) : '-';\n            var operation = {\n                op: array_operation.op,\n                path: ptr.add(index_token).toString(),\n                value: array_operation.value,\n            };\n            // padding++ // maybe only if array_operation.index > -1 ?\n            return [operations.concat(operation), padding + 1];\n        }\n        else if (isArrayRemove(array_operation)) {\n            var operation = {\n                op: array_operation.op,\n                path: ptr.add(String(array_operation.index + padding)).toString(),\n            };\n            // padding--\n            return [operations.concat(operation), padding - 1];\n        }\n        else { // replace\n            var replace_ptr = ptr.add(String(array_operation.index + padding));\n            var replace_operations = diff(array_operation.original, array_operation.value, replace_ptr);\n            return [operations.concat.apply(operations, replace_operations), padding];\n        }\n    }, [[], 0])[0];\n    return padded_operations;\n}\nexports.diffArrays = diffArrays;\nfunction diffObjects(input, output, ptr, diff) {\n    if (diff === void 0) { diff = diffAny; }\n    // if a key is in input but not output -> remove it\n    var operations = [];\n    subtract(input, output).forEach(function (key) {\n        operations.push({ op: 'remove', path: ptr.add(key).toString() });\n    });\n    // if a key is in output but not input -> add it\n    subtract(output, input).forEach(function (key) {\n        operations.push({ op: 'add', path: ptr.add(key).toString(), value: output[key] });\n    });\n    // if a key is in both, diff it recursively\n    intersection([input, output]).forEach(function (key) {\n        operations.push.apply(operations, diff(input[key], output[key], ptr.add(key)));\n    });\n    return operations;\n}\nexports.diffObjects = diffObjects;\nfunction diffValues(input, output, ptr) {\n    if (!equal_1.compare(input, output)) {\n        return [{ op: 'replace', path: ptr.toString(), value: output }];\n    }\n    return [];\n}\nexports.diffValues = diffValues;\nfunction diffAny(input, output, ptr, diff) {\n    if (diff === void 0) { diff = diffAny; }\n    var input_type = equal_1.objectType(input);\n    var output_type = equal_1.objectType(output);\n    if (input_type == 'array' && output_type == 'array') {\n        return diffArrays(input, output, ptr, diff);\n    }\n    if (input_type == 'object' && output_type == 'object') {\n        return diffObjects(input, output, ptr, diff);\n    }\n    // only pairs of arrays and objects can go down a path to produce a smaller\n    // diff; everything else must be wholesale replaced if inequal\n    return diffValues(input, output, ptr);\n}\nexports.diffAny = diffAny;\n","import {findDiffStart, findDiffEnd} from \"./diff\"\n\n// ::- A fragment represents a node's collection of child nodes.\n//\n// Like nodes, fragments are persistent data structures, and you\n// should not mutate them or their content. Rather, you create new\n// instances whenever needed. The API tries to make this easy.\nexport class Fragment {\n  constructor(content, size) {\n    this.content = content\n    // :: number\n    // The size of the fragment, which is the total of the size of its\n    // content nodes.\n    this.size = size || 0\n    if (size == null) for (let i = 0; i < content.length; i++)\n      this.size += content[i].nodeSize\n  }\n\n  // :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes between the given two\n  // positions (relative to start of this fragment). Doesn't descend\n  // into a node when the callback returns `false`.\n  nodesBetween(from, to, f, nodeStart = 0, parent) {\n    for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {\n        let start = pos + 1\n        child.nodesBetween(Math.max(0, from - start),\n                           Math.min(child.content.size, to - start),\n                           f, nodeStart + start)\n      }\n      pos = end\n    }\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) → ?bool)\n  // Call the given callback for every descendant node. The callback\n  // may return `false` to prevent traversal of a given node's children.\n  descendants(f) {\n    this.nodesBetween(0, this.size, f)\n  }\n\n  // : (number, number, ?string, ?string) → string\n  textBetween(from, to, blockSeparator, leafText) {\n    let text = \"\", separated = true\n    this.nodesBetween(from, to, (node, pos) => {\n      if (node.isText) {\n        text += node.text.slice(Math.max(from, pos) - pos, to - pos)\n        separated = !blockSeparator\n      } else if (node.isLeaf && leafText) {\n        text += leafText\n        separated = !blockSeparator\n      } else if (!separated && node.isBlock) {\n        text += blockSeparator\n        separated = true\n      }\n    }, 0)\n    return text\n  }\n\n  // :: (Fragment) → Fragment\n  // Create a new fragment containing the combined content of this\n  // fragment and the other.\n  append(other) {\n    if (!other.size) return this\n    if (!this.size) return other\n    let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0\n    if (last.isText && last.sameMarkup(first)) {\n      content[content.length - 1] = last.withText(last.text + first.text)\n      i = 1\n    }\n    for (; i < other.content.length; i++) content.push(other.content[i])\n    return new Fragment(content, this.size + other.size)\n  }\n\n  // :: (number, ?number) → Fragment\n  // Cut out the sub-fragment between the two given positions.\n  cut(from, to) {\n    if (to == null) to = this.size\n    if (from == 0 && to == this.size) return this\n    let result = [], size = 0\n    if (to > from) for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from) {\n        if (pos < from || end > to) {\n          if (child.isText)\n            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos))\n          else\n            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1))\n        }\n        result.push(child)\n        size += child.nodeSize\n      }\n      pos = end\n    }\n    return new Fragment(result, size)\n  }\n\n  cutByIndex(from, to) {\n    if (from == to) return Fragment.empty\n    if (from == 0 && to == this.content.length) return this\n    return new Fragment(this.content.slice(from, to))\n  }\n\n  // :: (number, Node) → Fragment\n  // Create a new fragment in which the node at the given index is\n  // replaced by the given node.\n  replaceChild(index, node) {\n    let current = this.content[index]\n    if (current == node) return this\n    let copy = this.content.slice()\n    let size = this.size + node.nodeSize - current.nodeSize\n    copy[index] = node\n    return new Fragment(copy, size)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by prepending the given node to this\n  // fragment.\n  addToStart(node) {\n    return new Fragment([node].concat(this.content), this.size + node.nodeSize)\n  }\n\n  // : (Node) → Fragment\n  // Create a new fragment by appending the given node to this\n  // fragment.\n  addToEnd(node) {\n    return new Fragment(this.content.concat(node), this.size + node.nodeSize)\n  }\n\n  // :: (Fragment) → bool\n  // Compare this fragment to another one.\n  eq(other) {\n    if (this.content.length != other.content.length) return false\n    for (let i = 0; i < this.content.length; i++)\n      if (!this.content[i].eq(other.content[i])) return false\n    return true\n  }\n\n  // :: ?Node\n  // The first child of the fragment, or `null` if it is empty.\n  get firstChild() { return this.content.length ? this.content[0] : null }\n\n  // :: ?Node\n  // The last child of the fragment, or `null` if it is empty.\n  get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null }\n\n  // :: number\n  // The number of child nodes in this fragment.\n  get childCount() { return this.content.length }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raise an error when the\n  // index is out of range.\n  child(index) {\n    let found = this.content[index]\n    if (!found) throw new RangeError(\"Index \" + index + \" out of range for \" + this)\n    return found\n  }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) {\n    return this.content[index]\n  }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) {\n    for (let i = 0, p = 0; i < this.content.length; i++) {\n      let child = this.content[i]\n      f(child, p, i)\n      p += child.nodeSize\n    }\n  }\n\n  // :: (Fragment) → ?number\n  // Find the first position at which this fragment and another\n  // fragment differ, or `null` if they are the same.\n  findDiffStart(other, pos = 0) {\n    return findDiffStart(this, other, pos)\n  }\n\n  // :: (Fragment) → ?{a: number, b: number}\n  // Find the first position, searching from the end, at which this\n  // fragment and the given fragment differ, or `null` if they are the\n  // same. Since this position will not be the same in both nodes, an\n  // object with two separate positions is returned.\n  findDiffEnd(other, pos = this.size, otherPos = other.size) {\n    return findDiffEnd(this, other, pos, otherPos)\n  }\n\n  // : (number, ?number) → {index: number, offset: number}\n  // Find the index and inner offset corresponding to a given relative\n  // position in this fragment. The result object will be reused\n  // (overwritten) the next time the function is called. (Not public.)\n  findIndex(pos, round = -1) {\n    if (pos == 0) return retIndex(0, pos)\n    if (pos == this.size) return retIndex(this.content.length, pos)\n    if (pos > this.size || pos < 0) throw new RangeError(`Position ${pos} outside of fragment (${this})`)\n    for (let i = 0, curPos = 0;; i++) {\n      let cur = this.child(i), end = curPos + cur.nodeSize\n      if (end >= pos) {\n        if (end == pos || round > 0) return retIndex(i + 1, end)\n        return retIndex(i, curPos)\n      }\n      curPos = end\n    }\n  }\n\n  // :: () → string\n  // Return a debugging string that describes this fragment.\n  toString() { return \"<\" + this.toStringInner() + \">\" }\n\n  toStringInner() { return this.content.join(\", \") }\n\n  // :: () → ?Object\n  // Create a JSON-serializeable representation of this fragment.\n  toJSON() {\n    return this.content.length ? this.content.map(n => n.toJSON()) : null\n  }\n\n  // :: (Schema, ?Object) → Fragment\n  // Deserialize a fragment from its JSON representation.\n  static fromJSON(schema, value) {\n    if (!value) return Fragment.empty\n    if (!Array.isArray(value)) throw new RangeError(\"Invalid input for Fragment.fromJSON\")\n    return new Fragment(value.map(schema.nodeFromJSON))\n  }\n\n  // :: ([Node]) → Fragment\n  // Build a fragment from an array of nodes. Ensures that adjacent\n  // text nodes with the same marks are joined together.\n  static fromArray(array) {\n    if (!array.length) return Fragment.empty\n    let joined, size = 0\n    for (let i = 0; i < array.length; i++) {\n      let node = array[i]\n      size += node.nodeSize\n      if (i && node.isText && array[i - 1].sameMarkup(node)) {\n        if (!joined) joined = array.slice(0, i)\n        joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text)\n      } else if (joined) {\n        joined.push(node)\n      }\n    }\n    return new Fragment(joined || array, size)\n  }\n\n  // :: (?union<Fragment, Node, [Node]>) → Fragment\n  // Create a fragment from something that can be interpreted as a set\n  // of nodes. For `null`, it returns the empty fragment. For a\n  // fragment, the fragment itself. For a node or array of nodes, a\n  // fragment containing those nodes.\n  static from(nodes) {\n    if (!nodes) return Fragment.empty\n    if (nodes instanceof Fragment) return nodes\n    if (Array.isArray(nodes)) return this.fromArray(nodes)\n    if (nodes.attrs) return new Fragment([nodes], nodes.nodeSize)\n    throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" +\n                         (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"))\n  }\n}\n\nconst found = {index: 0, offset: 0}\nfunction retIndex(index, offset) {\n  found.index = index\n  found.offset = offset\n  return found\n}\n\n// :: Fragment\n// An empty fragment. Intended to be reused whenever a node doesn't\n// contain anything (rather than allocating a new empty fragment for\n// each leaf node).\nFragment.empty = new Fragment([], 0)\n","export function findDiffStart(a, b, pos) {\n  for (let i = 0;; i++) {\n    if (i == a.childCount || i == b.childCount)\n      return a.childCount == b.childCount ? null : pos\n\n    let childA = a.child(i), childB = b.child(i)\n    if (childA == childB) { pos += childA.nodeSize; continue }\n\n    if (!childA.sameMarkup(childB)) return pos\n\n    if (childA.isText && childA.text != childB.text) {\n      for (let j = 0; childA.text[j] == childB.text[j]; j++)\n        pos++\n      return pos\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffStart(childA.content, childB.content, pos + 1)\n      if (inner != null) return inner\n    }\n    pos += childA.nodeSize\n  }\n}\n\nexport function findDiffEnd(a, b, posA, posB) {\n  for (let iA = a.childCount, iB = b.childCount;;) {\n    if (iA == 0 || iB == 0)\n      return iA == iB ? null : {a: posA, b: posB}\n\n    let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize\n    if (childA == childB) {\n      posA -= size; posB -= size\n      continue\n    }\n\n    if (!childA.sameMarkup(childB)) return {a: posA, b: posB}\n\n    if (childA.isText && childA.text != childB.text) {\n      let same = 0, minSize = Math.min(childA.text.length, childB.text.length)\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n        same++; posA--; posB--\n      }\n      return {a: posA, b: posB}\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1)\n      if (inner) return inner\n    }\n    posA -= size; posB -= size\n  }\n}\n","export function compareDeep(a, b) {\n  if (a === b) return true\n  if (!(a && typeof a == \"object\") ||\n      !(b && typeof b == \"object\")) return false\n  let array = Array.isArray(a)\n  if (Array.isArray(b) != array) return false\n  if (array) {\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++) if (!compareDeep(a[i], b[i])) return false\n  } else {\n    for (let p in a) if (!(p in b) || !compareDeep(a[p], b[p])) return false\n    for (let p in b) if (!(p in a)) return false\n  }\n  return true\n}\n","import {compareDeep} from \"./comparedeep\"\n\n// ::- A mark is a piece of information that can be attached to a node,\n// such as it being emphasized, in code font, or a link. It has a type\n// and optionally a set of attributes that provide further information\n// (such as the target of the link). Marks are created through a\n// `Schema`, which controls which types exist and which\n// attributes they have.\nexport class Mark {\n  constructor(type, attrs) {\n    // :: MarkType\n    // The type of this mark.\n    this.type = type\n    // :: Object\n    // The attributes associated with this mark.\n    this.attrs = attrs\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Given a set of marks, create a new set which contains this one as\n  // well, in the right position. If this mark is already in the set,\n  // the set itself is returned. If any marks that are set to be\n  // [exclusive](#model.MarkSpec.excludes) with this mark are present,\n  // those are replaced by this one.\n  addToSet(set) {\n    let copy, placed = false\n    for (let i = 0; i < set.length; i++) {\n      let other = set[i]\n      if (this.eq(other)) return set\n      if (this.type.excludes(other.type)) {\n        if (!copy) copy = set.slice(0, i)\n      } else if (other.type.excludes(this.type)) {\n        return set\n      } else {\n        if (!placed && other.type.rank > this.type.rank) {\n          if (!copy) copy = set.slice(0, i)\n          copy.push(this)\n          placed = true\n        }\n        if (copy) copy.push(other)\n      }\n    }\n    if (!copy) copy = set.slice()\n    if (!placed) copy.push(this)\n    return copy\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Remove this mark from the given set, returning a new set. If this\n  // mark is not in the set, the set itself is returned.\n  removeFromSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i]))\n        return set.slice(0, i).concat(set.slice(i + 1))\n    return set\n  }\n\n  // :: ([Mark]) → bool\n  // Test whether this mark is in the given set of marks.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i])) return true\n    return false\n  }\n\n  // :: (Mark) → bool\n  // Test whether this mark has the same type and attributes as\n  // another mark.\n  eq(other) {\n    return this == other ||\n      (this.type == other.type && compareDeep(this.attrs, other.attrs))\n  }\n\n  // :: () → Object\n  // Convert this mark to a JSON-serializeable representation.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    return obj\n  }\n\n  // :: (Schema, Object) → Mark\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Mark.fromJSON\")\n    let type = schema.marks[json.type]\n    if (!type) throw new RangeError(`There is no mark type ${json.type} in this schema`)\n    return type.create(json.attrs)\n  }\n\n  // :: ([Mark], [Mark]) → bool\n  // Test whether two sets of marks are identical.\n  static sameSet(a, b) {\n    if (a == b) return true\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++)\n      if (!a[i].eq(b[i])) return false\n    return true\n  }\n\n  // :: (?union<Mark, [Mark]>) → [Mark]\n  // Create a properly sorted mark set from null, a single mark, or an\n  // unsorted array of marks.\n  static setFrom(marks) {\n    if (!marks || marks.length == 0) return Mark.none\n    if (marks instanceof Mark) return [marks]\n    let copy = marks.slice()\n    copy.sort((a, b) => a.type.rank - b.type.rank)\n    return copy\n  }\n}\n\n// :: [Mark] The empty set of marks.\nMark.none = []\n","import {Fragment} from \"./fragment\"\n\n// ReplaceError:: class extends Error\n// Error type raised by [`Node.replace`](#model.Node.replace) when\n// given an invalid replacement.\n\nexport function ReplaceError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = ReplaceError.prototype\n  return err\n}\n\nReplaceError.prototype = Object.create(Error.prototype)\nReplaceError.prototype.constructor = ReplaceError\nReplaceError.prototype.name = \"ReplaceError\"\n\n// ::- A slice represents a piece cut out of a larger document. It\n// stores not only a fragment, but also the depth up to which nodes on\n// both side are ‘open’ (cut through).\nexport class Slice {\n  // :: (Fragment, number, number)\n  // Create a slice. When specifying a non-zero open depth, you must\n  // make sure that there are nodes of at least that depth at the\n  // appropriate side of the fragment—i.e. if the fragment is an empty\n  // paragraph node, `openStart` and `openEnd` can't be greater than 1.\n  //\n  // It is not necessary for the content of open nodes to conform to\n  // the schema's content constraints, though it should be a valid\n  // start/end/middle for such a node, depending on which sides are\n  // open.\n  constructor(content, openStart, openEnd) {\n    // :: Fragment The slice's content.\n    this.content = content\n    // :: number The open depth at the start.\n    this.openStart = openStart\n    // :: number The open depth at the end.\n    this.openEnd = openEnd\n  }\n\n  // :: number\n  // The size this slice would add when inserted into a document.\n  get size() {\n    return this.content.size - this.openStart - this.openEnd\n  }\n\n  insertAt(pos, fragment) {\n    let content = insertInto(this.content, pos + this.openStart, fragment, null)\n    return content && new Slice(content, this.openStart, this.openEnd)\n  }\n\n  removeBetween(from, to) {\n    return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd)\n  }\n\n  // :: (Slice) → bool\n  // Tests whether this slice is equal to another slice.\n  eq(other) {\n    return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd\n  }\n\n  toString() {\n    return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\"\n  }\n\n  // :: () → ?Object\n  // Convert a slice to a JSON-serializable representation.\n  toJSON() {\n    if (!this.content.size) return null\n    let json = {content: this.content.toJSON()}\n    if (this.openStart > 0) json.openStart = this.openStart\n    if (this.openEnd > 0) json.openEnd = this.openEnd\n    return json\n  }\n\n  // :: (Schema, ?Object) → Slice\n  // Deserialize a slice from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) return Slice.empty\n    let openStart = json.openStart || 0, openEnd = json.openEnd || 0\n    if (typeof openStart != \"number\" || typeof openEnd != \"number\")\n      throw new RangeError(\"Invalid input for Slice.fromJSON\")\n    return new Slice(Fragment.fromJSON(schema, json.content), json.openStart || 0, json.openEnd || 0)\n  }\n\n  // :: (Fragment, ?bool) → Slice\n  // Create a slice from a fragment by taking the maximum possible\n  // open value on both side of the fragment.\n  static maxOpen(fragment, openIsolating=true) {\n    let openStart = 0, openEnd = 0\n    for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) openStart++\n    for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild) openEnd++\n    return new Slice(fragment, openStart, openEnd)\n  }\n}\n\nfunction removeRange(content, from, to) {\n  let {index, offset} = content.findIndex(from), child = content.maybeChild(index)\n  let {index: indexTo, offset: offsetTo} = content.findIndex(to)\n  if (offset == from || child.isText) {\n    if (offsetTo != to && !content.child(indexTo).isText) throw new RangeError(\"Removing non-flat range\")\n    return content.cut(0, from).append(content.cut(to))\n  }\n  if (index != indexTo) throw new RangeError(\"Removing non-flat range\")\n  return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)))\n}\n\nfunction insertInto(content, dist, insert, parent) {\n  let {index, offset} = content.findIndex(dist), child = content.maybeChild(index)\n  if (offset == dist || child.isText) {\n    if (parent && !parent.canReplace(index, index, insert)) return null\n    return content.cut(0, dist).append(insert).append(content.cut(dist))\n  }\n  let inner = insertInto(child.content, dist - offset - 1, insert)\n  return inner && content.replaceChild(index, child.copy(inner))\n}\n\n// :: Slice\n// The empty slice.\nSlice.empty = new Slice(Fragment.empty, 0, 0)\n\nexport function replace($from, $to, slice) {\n  if (slice.openStart > $from.depth)\n    throw new ReplaceError(\"Inserted content deeper than insertion position\")\n  if ($from.depth - slice.openStart != $to.depth - slice.openEnd)\n    throw new ReplaceError(\"Inconsistent open depths\")\n  return replaceOuter($from, $to, slice, 0)\n}\n\nfunction replaceOuter($from, $to, slice, depth) {\n  let index = $from.index(depth), node = $from.node(depth)\n  if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n    let inner = replaceOuter($from, $to, slice, depth + 1)\n    return node.copy(node.content.replaceChild(index, inner))\n  } else if (!slice.content.size) {\n    return close(node, replaceTwoWay($from, $to, depth))\n  } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case\n    let parent = $from.parent, content = parent.content\n    return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)))\n  } else {\n    let {start, end} = prepareSliceForReplace(slice, $from)\n    return close(node, replaceThreeWay($from, start, end, $to, depth))\n  }\n}\n\nfunction checkJoin(main, sub) {\n  if (!sub.type.compatibleContent(main.type))\n    throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name)\n}\n\nfunction joinable($before, $after, depth) {\n  let node = $before.node(depth)\n  checkJoin(node, $after.node(depth))\n  return node\n}\n\nfunction addNode(child, target) {\n  let last = target.length - 1\n  if (last >= 0 && child.isText && child.sameMarkup(target[last]))\n    target[last] = child.withText(target[last].text + child.text)\n  else\n    target.push(child)\n}\n\nfunction addRange($start, $end, depth, target) {\n  let node = ($end || $start).node(depth)\n  let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount\n  if ($start) {\n    startIndex = $start.index(depth)\n    if ($start.depth > depth) {\n      startIndex++\n    } else if ($start.textOffset) {\n      addNode($start.nodeAfter, target)\n      startIndex++\n    }\n  }\n  for (let i = startIndex; i < endIndex; i++) addNode(node.child(i), target)\n  if ($end && $end.depth == depth && $end.textOffset)\n    addNode($end.nodeBefore, target)\n}\n\nfunction close(node, content) {\n  if (!node.type.validContent(content))\n    throw new ReplaceError(\"Invalid content for node \" + node.type.name)\n  return node.copy(content)\n}\n\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n  let openStart = $from.depth > depth && joinable($from, $start, depth + 1)\n  let openEnd = $to.depth > depth && joinable($end, $to, depth + 1)\n\n  let content = []\n  addRange(null, $from, depth, content)\n  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n    checkJoin(openStart, openEnd)\n    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content)\n  } else {\n    if (openStart)\n      addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content)\n    addRange($start, $end, depth, content)\n    if (openEnd)\n      addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction replaceTwoWay($from, $to, depth) {\n  let content = []\n  addRange(null, $from, depth, content)\n  if ($from.depth > depth) {\n    let type = joinable($from, $to, depth + 1)\n    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction prepareSliceForReplace(slice, $along) {\n  let extra = $along.depth - slice.openStart, parent = $along.node(extra)\n  let node = parent.copy(slice.content)\n  for (let i = extra - 1; i >= 0; i--)\n    node = $along.node(i).copy(Fragment.from(node))\n  return {start: node.resolveNoCache(slice.openStart + extra),\n          end: node.resolveNoCache(node.content.size - slice.openEnd - extra)}\n}\n","import {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {Slice, replace} from \"./replace\"\nimport {ResolvedPos} from \"./resolvedpos\"\nimport {compareDeep} from \"./comparedeep\"\n\nconst emptyAttrs = Object.create(null)\n\n// ::- This class represents a node in the tree that makes up a\n// ProseMirror document. So a document is an instance of `Node`, with\n// children that are also instances of `Node`.\n//\n// Nodes are persistent data structures. Instead of changing them, you\n// create new ones with the content you want. Old ones keep pointing\n// at the old document shape. This is made cheaper by sharing\n// structure between the old and new data as much as possible, which a\n// tree shape like this (without back pointers) makes easy.\n//\n// **Do not** directly mutate the properties of a `Node` object. See\n// [the guide](/docs/guide/#doc) for more information.\nexport class Node {\n  constructor(type, attrs, content, marks) {\n    // :: NodeType\n    // The type of node that this is.\n    this.type = type\n\n    // :: Object\n    // An object mapping attribute names to values. The kind of\n    // attributes allowed and required are\n    // [determined](#model.NodeSpec.attrs) by the node type.\n    this.attrs = attrs\n\n    // :: Fragment\n    // A container holding the node's children.\n    this.content = content || Fragment.empty\n\n    // :: [Mark]\n    // The marks (things like whether it is emphasized or part of a\n    // link) applied to this node.\n    this.marks = marks || Mark.none\n  }\n\n  // text:: ?string\n  // For text nodes, this contains the node's text content.\n\n  // :: number\n  // The size of this node, as defined by the integer-based [indexing\n  // scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n  // amount of characters. For other leaf nodes, it is one. For\n  // non-leaf nodes, it is the size of the content plus two (the start\n  // and end token).\n  get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size }\n\n  // :: number\n  // The number of children that the node has.\n  get childCount() { return this.content.childCount }\n\n  // :: (number) → Node\n  // Get the child node at the given index. Raises an error when the\n  // index is out of range.\n  child(index) { return this.content.child(index) }\n\n  // :: (number) → ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) { return this.content.maybeChild(index) }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) { this.content.forEach(f) }\n\n  // :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)\n  // Invoke a callback for all descendant nodes recursively between\n  // the given two positions that are relative to start of this node's\n  // content. The callback is invoked with the node, its\n  // parent-relative position, its parent node, and its child index.\n  // When the callback returns false for a given node, that node's\n  // children will not be recursed over. The last parameter can be\n  // used to specify a starting position to count from.\n  nodesBetween(from, to, f, startPos = 0) {\n    this.content.nodesBetween(from, to, f, startPos, this)\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) → ?bool)\n  // Call the given callback for every descendant node. Doesn't\n  // descend into a node when the callback returns `false`.\n  descendants(f) {\n    this.nodesBetween(0, this.content.size, f)\n  }\n\n  // :: string\n  // Concatenates all the text nodes found in this fragment and its\n  // children.\n  get textContent() { return this.textBetween(0, this.content.size, \"\") }\n\n  // :: (number, number, ?string, ?string) → string\n  // Get all text between positions `from` and `to`. When\n  // `blockSeparator` is given, it will be inserted whenever a new\n  // block node is started. When `leafText` is given, it'll be\n  // inserted for every non-text leaf node encountered.\n  textBetween(from, to, blockSeparator, leafText) {\n    return this.content.textBetween(from, to, blockSeparator, leafText)\n  }\n\n  // :: ?Node\n  // Returns this node's first child, or `null` if there are no\n  // children.\n  get firstChild() { return this.content.firstChild }\n\n  // :: ?Node\n  // Returns this node's last child, or `null` if there are no\n  // children.\n  get lastChild() { return this.content.lastChild }\n\n  // :: (Node) → bool\n  // Test whether two nodes represent the same piece of document.\n  eq(other) {\n    return this == other || (this.sameMarkup(other) && this.content.eq(other.content))\n  }\n\n  // :: (Node) → bool\n  // Compare the markup (type, attributes, and marks) of this node to\n  // those of another. Returns `true` if both have the same markup.\n  sameMarkup(other) {\n    return this.hasMarkup(other.type, other.attrs, other.marks)\n  }\n\n  // :: (NodeType, ?Object, ?[Mark]) → bool\n  // Check whether this node's markup correspond to the given type,\n  // attributes, and marks.\n  hasMarkup(type, attrs, marks) {\n    return this.type == type &&\n      compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\n      Mark.sameSet(this.marks, marks || Mark.none)\n  }\n\n  // :: (?Fragment) → Node\n  // Create a new node with the same markup as this node, containing\n  // the given content (or empty, if no content is given).\n  copy(content = null) {\n    if (content == this.content) return this\n    return new this.constructor(this.type, this.attrs, content, this.marks)\n  }\n\n  // :: ([Mark]) → Node\n  // Create a copy of this node, with the given set of marks instead\n  // of the node's own marks.\n  mark(marks) {\n    return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks)\n  }\n\n  // :: (number, ?number) → Node\n  // Create a copy of this node with only the content between the\n  // given positions. If `to` is not given, it defaults to the end of\n  // the node.\n  cut(from, to) {\n    if (from == 0 && to == this.content.size) return this\n    return this.copy(this.content.cut(from, to))\n  }\n\n  // :: (number, ?number) → Slice\n  // Cut out the part of the document between the given positions, and\n  // return it as a `Slice` object.\n  slice(from, to = this.content.size, includeParents = false) {\n    if (from == to) return Slice.empty\n\n    let $from = this.resolve(from), $to = this.resolve(to)\n    let depth = includeParents ? 0 : $from.sharedDepth(to)\n    let start = $from.start(depth), node = $from.node(depth)\n    let content = node.content.cut($from.pos - start, $to.pos - start)\n    return new Slice(content, $from.depth - depth, $to.depth - depth)\n  }\n\n  // :: (number, number, Slice) → Node\n  // Replace the part of the document between the given positions with\n  // the given slice. The slice must 'fit', meaning its open sides\n  // must be able to connect to the surrounding content, and its\n  // content nodes must be valid children for the node they are placed\n  // into. If any of this is violated, an error of type\n  // [`ReplaceError`](#model.ReplaceError) is thrown.\n  replace(from, to, slice) {\n    return replace(this.resolve(from), this.resolve(to), slice)\n  }\n\n  // :: (number) → ?Node\n  // Find the node directly after the given position.\n  nodeAt(pos) {\n    for (let node = this;;) {\n      let {index, offset} = node.content.findIndex(pos)\n      node = node.maybeChild(index)\n      if (!node) return null\n      if (offset == pos || node.isText) return node\n      pos -= offset + 1\n    }\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node after the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childAfter(pos) {\n    let {index, offset} = this.content.findIndex(pos)\n    return {node: this.content.maybeChild(index), index, offset}\n  }\n\n  // :: (number) → {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node before the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childBefore(pos) {\n    if (pos == 0) return {node: null, index: 0, offset: 0}\n    let {index, offset} = this.content.findIndex(pos)\n    if (offset < pos) return {node: this.content.child(index), index, offset}\n    let node = this.content.child(index - 1)\n    return {node, index: index - 1, offset: offset - node.nodeSize}\n  }\n\n  // :: (number) → ResolvedPos\n  // Resolve the given position in the document, returning an\n  // [object](#model.ResolvedPos) with information about its context.\n  resolve(pos) { return ResolvedPos.resolveCached(this, pos) }\n\n  resolveNoCache(pos) { return ResolvedPos.resolve(this, pos) }\n\n  // :: (number, number, MarkType) → bool\n  // Test whether a mark of the given type occurs in this document\n  // between the two given positions.\n  rangeHasMark(from, to, type) {\n    let found = false\n    if (to > from) this.nodesBetween(from, to, node => {\n      if (type.isInSet(node.marks)) found = true\n      return !found\n    })\n    return found\n  }\n\n  // :: bool\n  // True when this is a block (non-inline node)\n  get isBlock() { return this.type.isBlock }\n\n  // :: bool\n  // True when this is a textblock node, a block node with inline\n  // content.\n  get isTextblock() { return this.type.isTextblock }\n\n  // :: bool\n  // True when this node allows inline content.\n  get inlineContent() { return this.type.inlineContent }\n\n  // :: bool\n  // True when this is an inline node (a text node or a node that can\n  // appear among text).\n  get isInline() { return this.type.isInline }\n\n  // :: bool\n  // True when this is a text node.\n  get isText() { return this.type.isText }\n\n  // :: bool\n  // True when this is a leaf node.\n  get isLeaf() { return this.type.isLeaf }\n\n  // :: bool\n  // True when this is an atom, i.e. when it does not have directly\n  // editable content. This is usually the same as `isLeaf`, but can\n  // be configured with the [`atom` property](#model.NodeSpec.atom) on\n  // a node's spec (typically used when the node is displayed as an\n  // uneditable [node view](#view.NodeView)).\n  get isAtom() { return this.type.isAtom }\n\n  // :: () → string\n  // Return a string representation of this node for debugging\n  // purposes.\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    let name = this.type.name\n    if (this.content.size)\n      name += \"(\" + this.content.toStringInner() + \")\"\n    return wrapMarks(this.marks, name)\n  }\n\n  // :: (number) → ContentMatch\n  // Get the content match in this node at the given index.\n  contentMatchAt(index) {\n    let match = this.type.contentMatch.matchFragment(this.content, 0, index)\n    if (!match) throw new Error(\"Called contentMatchAt on a node with invalid content\")\n    return match\n  }\n\n  // :: (number, number, ?Fragment, ?number, ?number) → bool\n  // Test whether replacing the range between `from` and `to` (by\n  // child index) with the given replacement fragment (which defaults\n  // to the empty fragment) would leave the node's content valid. You\n  // can optionally pass `start` and `end` indices into the\n  // replacement fragment.\n  canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {\n    let one = this.contentMatchAt(from).matchFragment(replacement, start, end)\n    let two = one && one.matchFragment(this.content, to)\n    if (!two || !two.validEnd) return false\n    for (let i = start; i < end; i++) if (!this.type.allowsMarks(replacement.child(i).marks)) return false\n    return true\n  }\n\n  // :: (number, number, NodeType, ?[Mark]) → bool\n  // Test whether replacing the range `from` to `to` (by index) with a\n  // node of the given type would leave the node's content valid.\n  canReplaceWith(from, to, type, marks) {\n    if (marks && !this.type.allowsMarks(marks)) return false\n    let start = this.contentMatchAt(from).matchType(type)\n    let end = start && start.matchFragment(this.content, to)\n    return end ? end.validEnd : false\n  }\n\n  // :: (Node) → bool\n  // Test whether the given node's content could be appended to this\n  // node. If that node is empty, this will only return true if there\n  // is at least one node type that can appear in both nodes (to avoid\n  // merging completely incompatible nodes).\n  canAppend(other) {\n    if (other.content.size) return this.canReplace(this.childCount, this.childCount, other.content)\n    else return this.type.compatibleContent(other.type)\n  }\n\n  // :: ()\n  // Check whether this node and its descendants conform to the\n  // schema, and raise error when they do not.\n  check() {\n    if (!this.type.validContent(this.content))\n      throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0, 50)}`)\n    this.content.forEach(node => node.check())\n  }\n\n  // :: () → Object\n  // Return a JSON-serializeable representation of this node.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    if (this.content.size)\n      obj.content = this.content.toJSON()\n    if (this.marks.length)\n      obj.marks = this.marks.map(n => n.toJSON())\n    return obj\n  }\n\n  // :: (Schema, Object) → Node\n  // Deserialize a node from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Node.fromJSON\")\n    let marks = null\n    if (json.marks) {\n      if (!Array.isArray(json.marks)) throw new RangeError(\"Invalid mark data for Node.fromJSON\")\n      marks = json.marks.map(schema.markFromJSON)\n    }\n    if (json.type == \"text\") {\n      if (typeof json.text != \"string\") throw new RangeError(\"Invalid text node in JSON\")\n      return schema.text(json.text, marks)\n    }\n    let content = Fragment.fromJSON(schema, json.content)\n    return schema.nodeType(json.type).create(json.attrs, content, marks)\n  }\n}\n\nexport class TextNode extends Node {\n  constructor(type, attrs, content, marks) {\n    super(type, attrs, null, marks)\n\n    if (!content) throw new RangeError(\"Empty text nodes are not allowed\")\n\n    this.text = content\n  }\n\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    return wrapMarks(this.marks, JSON.stringify(this.text))\n  }\n\n  get textContent() { return this.text }\n\n  textBetween(from, to) { return this.text.slice(from, to) }\n\n  get nodeSize() { return this.text.length }\n\n  mark(marks) {\n    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks)\n  }\n\n  withText(text) {\n    if (text == this.text) return this\n    return new TextNode(this.type, this.attrs, text, this.marks)\n  }\n\n  cut(from = 0, to = this.text.length) {\n    if (from == 0 && to == this.text.length) return this\n    return this.withText(this.text.slice(from, to))\n  }\n\n  eq(other) {\n    return this.sameMarkup(other) && this.text == other.text\n  }\n\n  toJSON() {\n    let base = super.toJSON()\n    base.text = this.text\n    return base\n  }\n}\n\nfunction wrapMarks(marks, str) {\n  for (let i = marks.length - 1; i >= 0; i--)\n    str = marks[i].type.name + \"(\" + str + \")\"\n  return str\n}\n","// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n  this.content = content;\n}\n\nOrderedMap.prototype = {\n  constructor: OrderedMap,\n\n  find: function(key) {\n    for (var i = 0; i < this.content.length; i += 2)\n      if (this.content[i] === key) return i\n    return -1\n  },\n\n  // :: (string) → ?any\n  // Retrieve the value stored under `key`, or return undefined when\n  // no such key exists.\n  get: function(key) {\n    var found = this.find(key);\n    return found == -1 ? undefined : this.content[found + 1]\n  },\n\n  // :: (string, any, ?string) → OrderedMap\n  // Create a new map by replacing the value of `key` with a new\n  // value, or adding a binding to the end of the map. If `newKey` is\n  // given, the key of the binding will be replaced with that key.\n  update: function(key, value, newKey) {\n    var self = newKey && newKey != key ? this.remove(newKey) : this;\n    var found = self.find(key), content = self.content.slice();\n    if (found == -1) {\n      content.push(newKey || key, value);\n    } else {\n      content[found + 1] = value;\n      if (newKey) content[found] = newKey;\n    }\n    return new OrderedMap(content)\n  },\n\n  // :: (string) → OrderedMap\n  // Return a map with the given key removed, if it existed.\n  remove: function(key) {\n    var found = this.find(key);\n    if (found == -1) return this\n    var content = this.content.slice();\n    content.splice(found, 2);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the start of the map.\n  addToStart: function(key, value) {\n    return new OrderedMap([key, value].concat(this.remove(key).content))\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the end of the map.\n  addToEnd: function(key, value) {\n    var content = this.remove(key).content.slice();\n    content.push(key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, string, any) → OrderedMap\n  // Add a key after the given key. If `place` is not found, the new\n  // key is added to the end.\n  addBefore: function(place, key, value) {\n    var without = this.remove(key), content = without.content.slice();\n    var found = without.find(place);\n    content.splice(found == -1 ? content.length : found, 0, key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: ((key: string, value: any))\n  // Call the given function for each key/value pair in the map, in\n  // order.\n  forEach: function(f) {\n    for (var i = 0; i < this.content.length; i += 2)\n      f(this.content[i], this.content[i + 1]);\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by prepending the keys in this map that don't\n  // appear in `map` before the keys in `map`.\n  prepend: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(map.content.concat(this.subtract(map).content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by appending the keys in this map that don't\n  // appear in `map` after the keys in `map`.\n  append: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(this.subtract(map).content.concat(map.content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a map containing all the keys in this map that don't\n  // appear in `map`.\n  subtract: function(map) {\n    var result = this;\n    map = OrderedMap.from(map);\n    for (var i = 0; i < map.content.length; i += 2)\n      result = result.remove(map.content[i]);\n    return result\n  },\n\n  // :: number\n  // The amount of keys in this map.\n  get size() {\n    return this.content.length >> 1\n  }\n};\n\n// :: (?union<Object, OrderedMap>) → OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\nOrderedMap.from = function(value) {\n  if (value instanceof OrderedMap) return value\n  var content = [];\n  if (value) for (var prop in value) content.push(prop, value[prop]);\n  return new OrderedMap(content)\n};\n\nvar orderedmap = OrderedMap;\n\nexport default orderedmap;\n","import {Fragment} from \"./fragment\"\n\n// ::- Instances of this class represent a match state of a node\n// type's [content expression](#model.NodeSpec.content), and can be\n// used to find out whether further content matches here, and whether\n// a given position is a valid end of the node.\nexport class ContentMatch {\n  constructor(validEnd) {\n    // :: bool\n    // True when this match state represents a valid end of the node.\n    this.validEnd = validEnd\n    this.next = []\n    this.wrapCache = []\n  }\n\n  static parse(string, nodeTypes) {\n    let stream = new TokenStream(string, nodeTypes)\n    if (stream.next == null) return ContentMatch.empty\n    let expr = parseExpr(stream)\n    if (stream.next) stream.err(\"Unexpected trailing text\")\n    let match = dfa(nfa(expr))\n    checkForDeadEnds(match, stream)\n    return match\n  }\n\n  // :: (NodeType) → ?ContentMatch\n  // Match a node type, returning a match after that node if\n  // successful.\n  matchType(type) {\n    for (let i = 0; i < this.next.length; i += 2)\n      if (this.next[i] == type) return this.next[i + 1]\n    return null\n  }\n\n  // :: (Fragment, ?number, ?number) → ?ContentMatch\n  // Try to match a fragment. Returns the resulting match when\n  // successful.\n  matchFragment(frag, start = 0, end = frag.childCount) {\n    let cur = this\n    for (let i = start; cur && i < end; i++)\n      cur = cur.matchType(frag.child(i).type)\n    return cur\n  }\n\n  get inlineContent() {\n    let first = this.next[0]\n    return first ? first.isInline : false\n  }\n\n  // :: ?NodeType\n  // Get the first matching node type at this match position that can\n  // be generated.\n  get defaultType() {\n    for (let i = 0; i < this.next.length; i += 2) {\n      let type = this.next[i]\n      if (!(type.isText || type.hasRequiredAttrs())) return type\n    }\n  }\n\n  compatible(other) {\n    for (let i = 0; i < this.next.length; i += 2)\n      for (let j = 0; j < other.next.length; j += 2)\n        if (this.next[i] == other.next[j]) return true\n    return false\n  }\n\n  // :: (Fragment, bool, ?number) → ?Fragment\n  // Try to match the given fragment, and if that fails, see if it can\n  // be made to match by inserting nodes in front of it. When\n  // successful, return a fragment of inserted nodes (which may be\n  // empty if nothing had to be inserted). When `toEnd` is true, only\n  // return a fragment if the resulting match goes to the end of the\n  // content expression.\n  fillBefore(after, toEnd = false, startIndex = 0) {\n    let seen = [this]\n    function search(match, types) {\n      let finished = match.matchFragment(after, startIndex)\n      if (finished && (!toEnd || finished.validEnd))\n        return Fragment.from(types.map(tp => tp.createAndFill()))\n\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i], next = match.next[i + 1]\n        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n          seen.push(next)\n          let found = search(next, types.concat(type))\n          if (found) return found\n        }\n      }\n    }\n\n    return search(this, [])\n  }\n\n  // :: (NodeType) → ?[NodeType]\n  // Find a set of wrapping node types that would allow a node of the\n  // given type to appear at this position. The result may be empty\n  // (when it fits directly) and will be null when no such wrapping\n  // exists.\n  findWrapping(target) {\n    for (let i = 0; i < this.wrapCache.length; i += 2)\n      if (this.wrapCache[i] == target) return this.wrapCache[i + 1]\n    let computed = this.computeWrapping(target)\n    this.wrapCache.push(target, computed)\n    return computed\n  }\n\n  computeWrapping(target) {\n    let seen = Object.create(null), active = [{match: this, type: null, via: null}]\n    while (active.length) {\n      let current = active.shift(), match = current.match\n      if (match.matchType(target)) {\n        let result = []\n        for (let obj = current; obj.type; obj = obj.via)\n          result.push(obj.type)\n        return result.reverse()\n      }\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i]\n        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {\n          active.push({match: type.contentMatch, type, via: current})\n          seen[type.name] = true\n        }\n      }\n    }\n  }\n\n  // :: number\n  // The number of outgoing edges this node has in the finite\n  // automaton that describes the content expression.\n  get edgeCount() {\n    return this.next.length >> 1\n  }\n\n  // :: (number) → {type: NodeType, next: ContentMatch}\n  // Get the _n_​th outgoing edge from this node in the finite\n  // automaton that describes the content expression.\n  edge(n) {\n    let i = n << 1\n    if (i >= this.next.length) throw new RangeError(`There's no ${n}th edge in this content match`)\n    return {type: this.next[i], next: this.next[i + 1]}\n  }\n\n  toString() {\n    let seen = []\n    function scan(m) {\n      seen.push(m)\n      for (let i = 1; i < m.next.length; i += 2)\n        if (seen.indexOf(m.next[i]) == -1) scan(m.next[i])\n    }\n    scan(this)\n    return seen.map((m, i) => {\n      let out = i + (m.validEnd ? \"*\" : \" \") + \" \"\n      for (let i = 0; i < m.next.length; i += 2)\n        out += (i ? \", \" : \"\") + m.next[i].name + \"->\" + seen.indexOf(m.next[i + 1])\n      return out\n    }).join(\"\\n\")\n  }\n}\n\nContentMatch.empty = new ContentMatch(true)\n\nclass TokenStream {\n  constructor(string, nodeTypes) {\n    this.string = string\n    this.nodeTypes = nodeTypes\n    this.inline = null\n    this.pos = 0\n    this.tokens = string.split(/\\s*(?=\\b|\\W|$)/)\n    if (this.tokens[this.tokens.length - 1] == \"\") this.tokens.pop()\n    if (this.tokens[0] == \"\") this.tokens.unshift()\n  }\n\n  get next() { return this.tokens[this.pos] }\n\n  eat(tok) { return this.next == tok && (this.pos++ || true) }\n\n  err(str) { throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\") }\n}\n\nfunction parseExpr(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSeq(stream)) }\n  while (stream.eat(\"|\"))\n  return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n}\n\nfunction parseExprSeq(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSubscript(stream)) }\n  while (stream.next && stream.next != \")\" && stream.next != \"|\")\n  return exprs.length == 1 ? exprs[0] : {type: \"seq\", exprs}\n}\n\nfunction parseExprSubscript(stream) {\n  let expr = parseExprAtom(stream)\n  for (;;) {\n    if (stream.eat(\"+\"))\n      expr = {type: \"plus\", expr}\n    else if (stream.eat(\"*\"))\n      expr = {type: \"star\", expr}\n    else if (stream.eat(\"?\"))\n      expr = {type: \"opt\", expr}\n    else if (stream.eat(\"{\"))\n      expr = parseExprRange(stream, expr)\n    else break\n  }\n  return expr\n}\n\nfunction parseNum(stream) {\n  if (/\\D/.test(stream.next)) stream.err(\"Expected number, got '\" + stream.next + \"'\")\n  let result = Number(stream.next)\n  stream.pos++\n  return result\n}\n\nfunction parseExprRange(stream, expr) {\n  let min = parseNum(stream), max = min\n  if (stream.eat(\",\")) {\n    if (stream.next != \"}\") max = parseNum(stream)\n    else max = -1\n  }\n  if (!stream.eat(\"}\")) stream.err(\"Unclosed braced range\")\n  return {type: \"range\", min, max, expr}\n}\n\nfunction resolveName(stream, name) {\n  let types = stream.nodeTypes, type = types[name]\n  if (type) return [type]\n  let result = []\n  for (let typeName in types) {\n    let type = types[typeName]\n    if (type.groups.indexOf(name) > -1) result.push(type)\n  }\n  if (result.length == 0) stream.err(\"No node type or group '\" + name + \"' found\")\n  return result\n}\n\nfunction parseExprAtom(stream) {\n  if (stream.eat(\"(\")) {\n    let expr = parseExpr(stream)\n    if (!stream.eat(\")\")) stream.err(\"Missing closing paren\")\n    return expr\n  } else if (!/\\W/.test(stream.next)) {\n    let exprs = resolveName(stream, stream.next).map(type => {\n      if (stream.inline == null) stream.inline = type.isInline\n      else if (stream.inline != type.isInline) stream.err(\"Mixing inline and block content\")\n      return {type: \"name\", value: type}\n    })\n    stream.pos++\n    return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n  } else {\n    stream.err(\"Unexpected token '\" + stream.next + \"'\")\n  }\n}\n\n// The code below helps compile a regular-expression-like language\n// into a deterministic finite automaton. For a good introduction to\n// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html\n\n// : (Object) → [[{term: ?any, to: number}]]\n// Construct an NFA from an expression as returned by the parser. The\n// NFA is represented as an array of states, which are themselves\n// arrays of edges, which are `{term, to}` objects. The first state is\n// the entry state and the last node is the success state.\n//\n// Note that unlike typical NFAs, the edge ordering in this one is\n// significant, in that it is used to contruct filler content when\n// necessary.\nfunction nfa(expr) {\n  let nfa = [[]]\n  connect(compile(expr, 0), node())\n  return nfa\n\n  function node() { return nfa.push([]) - 1 }\n  function edge(from, to, term) {\n    let edge = {term, to}\n    nfa[from].push(edge)\n    return edge\n  }\n  function connect(edges, to) { edges.forEach(edge => edge.to = to) }\n\n  function compile(expr, from) {\n    if (expr.type == \"choice\") {\n      return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), [])\n    } else if (expr.type == \"seq\") {\n      for (let i = 0;; i++) {\n        let next = compile(expr.exprs[i], from)\n        if (i == expr.exprs.length - 1) return next\n        connect(next, from = node())\n      }\n    } else if (expr.type == \"star\") {\n      let loop = node()\n      edge(from, loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"plus\") {\n      let loop = node()\n      connect(compile(expr.expr, from), loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"opt\") {\n      return [edge(from)].concat(compile(expr.expr, from))\n    } else if (expr.type == \"range\") {\n      let cur = from\n      for (let i = 0; i < expr.min; i++) {\n        let next = node()\n        connect(compile(expr.expr, cur), next)\n        cur = next\n      }\n      if (expr.max == -1) {\n        connect(compile(expr.expr, cur), cur)\n      } else {\n        for (let i = expr.min; i < expr.max; i++) {\n          let next = node()\n          edge(cur, next)\n          connect(compile(expr.expr, cur), next)\n          cur = next\n        }\n      }\n      return [edge(cur)]\n    } else if (expr.type == \"name\") {\n      return [edge(from, null, expr.value)]\n    }\n  }\n}\n\nfunction cmp(a, b) { return b - a }\n\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n  let result = []\n  scan(node)\n  return result.sort(cmp)\n\n  function scan(node) {\n    let edges = nfa[node]\n    if (edges.length == 1 && !edges[0].term) return scan(edges[0].to)\n    result.push(node)\n    for (let i = 0; i < edges.length; i++) {\n      let {term, to} = edges[i]\n      if (!term && result.indexOf(to) == -1) scan(to)\n    }\n  }\n}\n\n// : ([[{term: ?any, to: number}]]) → ContentMatch\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n  let labeled = Object.create(null)\n  return explore(nullFrom(nfa, 0))\n\n  function explore(states) {\n    let out = []\n    states.forEach(node => {\n      nfa[node].forEach(({term, to}) => {\n        if (!term) return\n        let known = out.indexOf(term), set = known > -1 && out[known + 1]\n        nullFrom(nfa, to).forEach(node => {\n          if (!set) out.push(term, set = [])\n          if (set.indexOf(node) == -1) set.push(node)\n        })\n      })\n    })\n    let state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1)\n    for (let i = 0; i < out.length; i += 2) {\n      let states = out[i + 1].sort(cmp)\n      state.next.push(out[i], labeled[states.join(\",\")] || explore(states))\n    }\n    return state\n  }\n}\n\nfunction checkForDeadEnds(match, stream) {\n  for (let i = 0, work = [match]; i < work.length; i++) {\n    let state = work[i], dead = !state.validEnd, nodes = []\n    for (let j = 0; j < state.next.length; j += 2) {\n      let node = state.next[j], next = state.next[j + 1]\n      nodes.push(node.name)\n      if (dead && !(node.isText || node.hasRequiredAttrs())) dead = false\n      if (work.indexOf(next) == -1) work.push(next)\n    }\n    if (dead) stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position\")\n  }\n}\n","import OrderedMap from \"orderedmap\"\n\nimport {Node, TextNode} from \"./node\"\nimport {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {ContentMatch} from \"./content\"\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n  let defaults = Object.create(null)\n  for (let attrName in attrs) {\n    let attr = attrs[attrName]\n    if (!attr.hasDefault) return null\n    defaults[attrName] = attr.default\n  }\n  return defaults\n}\n\nfunction computeAttrs(attrs, value) {\n  let built = Object.create(null)\n  for (let name in attrs) {\n    let given = value && value[name]\n    if (given === undefined) {\n      let attr = attrs[name]\n      if (attr.hasDefault) given = attr.default\n      else throw new RangeError(\"No value supplied for attribute \" + name)\n    }\n    built[name] = given\n  }\n  return built\n}\n\nfunction initAttrs(attrs) {\n  let result = Object.create(null)\n  if (attrs) for (let name in attrs) result[name] = new Attribute(attrs[name])\n  return result\n}\n\n// ::- Node types are objects allocated once per `Schema` and used to\n// [tag](#model.Node.type) `Node` instances. They contain information\n// about the node type, such as its name and what kind of node it\n// represents.\nexport class NodeType {\n  constructor(name, schema, spec) {\n    // :: string\n    // The name the node type has in this schema.\n    this.name = name\n\n    // :: Schema\n    // A link back to the `Schema` the node type belongs to.\n    this.schema = schema\n\n    // :: NodeSpec\n    // The spec that this type is based on\n    this.spec = spec\n\n    this.groups = spec.group ? spec.group.split(\" \") : []\n    this.attrs = initAttrs(spec.attrs)\n\n    this.defaultAttrs = defaultAttrs(this.attrs)\n\n    // :: ContentMatch\n    // The starting match of the node type's content expression.\n    this.contentMatch = null\n\n    // : ?[MarkType]\n    // The set of marks allowed in this node. `null` means all marks\n    // are allowed.\n    this.markSet = null\n\n    // :: bool\n    // True if this node type has inline content.\n    this.inlineContent = null\n\n    // :: bool\n    // True if this is a block type\n    this.isBlock = !(spec.inline || name == \"text\")\n\n    // :: bool\n    // True if this is the text node type.\n    this.isText = name == \"text\"\n  }\n\n  // :: bool\n  // True if this is an inline type.\n  get isInline() { return !this.isBlock }\n\n  // :: bool\n  // True if this is a textblock type, a block that contains inline\n  // content.\n  get isTextblock() { return this.isBlock && this.inlineContent }\n\n  // :: bool\n  // True for node types that allow no content.\n  get isLeaf() { return this.contentMatch == ContentMatch.empty }\n\n  // :: bool\n  // True when this node is an atom, i.e. when it does not have\n  // directly editable content.\n  get isAtom() { return this.isLeaf || this.spec.atom }\n\n  // :: () → bool\n  // Tells you whether this node type has any required attributes.\n  hasRequiredAttrs() {\n    for (let n in this.attrs) if (this.attrs[n].isRequired) return true\n    return false\n  }\n\n  compatibleContent(other) {\n    return this == other || this.contentMatch.compatible(other.contentMatch)\n  }\n\n  computeAttrs(attrs) {\n    if (!attrs && this.defaultAttrs) return this.defaultAttrs\n    else return computeAttrs(this.attrs, attrs)\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a `Node` of this type. The given attributes are\n  // checked and defaulted (you can pass `null` to use the type's\n  // defaults entirely, if no required attributes exist). `content`\n  // may be a `Fragment`, a node, an array of nodes, or\n  // `null`. Similarly `marks` may be `null` to default to the empty\n  // set of marks.\n  create(attrs, content, marks) {\n    if (this.isText) throw new Error(\"NodeType.create can't construct text nodes\")\n    return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Like [`create`](#model.NodeType.create), but check the given content\n  // against the node type's content restrictions, and throw an error\n  // if it doesn't match.\n  createChecked(attrs, content, marks) {\n    content = Fragment.from(content)\n    if (!this.validContent(content))\n      throw new RangeError(\"Invalid content for node \" + this.name)\n    return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node\n  // Like [`create`](#model.NodeType.create), but see if it is necessary to\n  // add nodes to the start or end of the given fragment to make it\n  // fit the node. If no fitting wrapping can be found, return null.\n  // Note that, due to the fact that required nodes can always be\n  // created, this will always succeed if you pass null or\n  // `Fragment.empty` as content.\n  createAndFill(attrs, content, marks) {\n    attrs = this.computeAttrs(attrs)\n    content = Fragment.from(content)\n    if (content.size) {\n      let before = this.contentMatch.fillBefore(content)\n      if (!before) return null\n      content = before.append(content)\n    }\n    let after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true)\n    if (!after) return null\n    return new Node(this, attrs, content.append(after), Mark.setFrom(marks))\n  }\n\n  // :: (Fragment) → bool\n  // Returns true if the given fragment is valid content for this node\n  // type with the given attributes.\n  validContent(content) {\n    let result = this.contentMatch.matchFragment(content)\n    if (!result || !result.validEnd) return false\n    for (let i = 0; i < content.childCount; i++)\n      if (!this.allowsMarks(content.child(i).marks)) return false\n    return true\n  }\n\n  // :: (MarkType) → bool\n  // Check whether the given mark type is allowed in this node.\n  allowsMarkType(markType) {\n    return this.markSet == null || this.markSet.indexOf(markType) > -1\n  }\n\n  // :: ([Mark]) → bool\n  // Test whether the given set of marks are allowed in this node.\n  allowsMarks(marks) {\n    if (this.markSet == null) return true\n    for (let i = 0; i < marks.length; i++) if (!this.allowsMarkType(marks[i].type)) return false\n    return true\n  }\n\n  // :: ([Mark]) → [Mark]\n  // Removes the marks that are not allowed in this node from the given set.\n  allowedMarks(marks) {\n    if (this.markSet == null) return marks\n    let copy\n    for (let i = 0; i < marks.length; i++) {\n      if (!this.allowsMarkType(marks[i].type)) {\n        if (!copy) copy = marks.slice(0, i)\n      } else if (copy) {\n        copy.push(marks[i])\n      }\n    }\n    return !copy ? marks : copy.length ? copy : Mark.empty\n  }\n\n  static compile(nodes, schema) {\n    let result = Object.create(null)\n    nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec))\n\n    let topType = schema.spec.topNode || \"doc\"\n    if (!result[topType]) throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\")\n    if (!result.text) throw new RangeError(\"Every schema needs a 'text' type\")\n    for (let _ in result.text.attrs) throw new RangeError(\"The text node type should not have attributes\")\n\n    return result\n  }\n}\n\n// Attribute descriptors\n\nclass Attribute {\n  constructor(options) {\n    this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\")\n    this.default = options.default\n  }\n\n  get isRequired() {\n    return !this.hasDefault\n  }\n}\n\n// Marks\n\n// ::- Like nodes, marks (which are associated with nodes to signify\n// things like emphasis or being part of a link) are\n// [tagged](#model.Mark.type) with type objects, which are\n// instantiated once per `Schema`.\nexport class MarkType {\n  constructor(name, rank, schema, spec) {\n    // :: string\n    // The name of the mark type.\n    this.name = name\n\n    // :: Schema\n    // The schema that this mark type instance is part of.\n    this.schema = schema\n\n    // :: MarkSpec\n    // The spec on which the type is based.\n    this.spec = spec\n\n    this.attrs = initAttrs(spec.attrs)\n\n    this.rank = rank\n    this.excluded = null\n    let defaults = defaultAttrs(this.attrs)\n    this.instance = defaults && new Mark(this, defaults)\n  }\n\n  // :: (?Object) → Mark\n  // Create a mark of this type. `attrs` may be `null` or an object\n  // containing only some of the mark's attributes. The others, if\n  // they have defaults, will be added.\n  create(attrs) {\n    if (!attrs && this.instance) return this.instance\n    return new Mark(this, computeAttrs(this.attrs, attrs))\n  }\n\n  static compile(marks, schema) {\n    let result = Object.create(null), rank = 0\n    marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec))\n    return result\n  }\n\n  // :: ([Mark]) → [Mark]\n  // When there is a mark of this type in the given set, a new set\n  // without it is returned. Otherwise, the input set is returned.\n  removeFromSet(set) {\n    for (var i = 0; i < set.length; i++)\n      if (set[i].type == this)\n        return set.slice(0, i).concat(set.slice(i + 1))\n    return set\n  }\n\n  // :: ([Mark]) → ?Mark\n  // Tests whether there is a mark of this type in the given set.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (set[i].type == this) return set[i]\n  }\n\n  // :: (MarkType) → bool\n  // Queries whether a given mark type is\n  // [excluded](#model.MarkSpec.excludes) by this one.\n  excludes(other) {\n    return this.excluded.indexOf(other) > -1\n  }\n}\n\n// SchemaSpec:: interface\n// An object describing a schema, as passed to the [`Schema`](#model.Schema)\n// constructor.\n//\n//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>\n//   The node types in this schema. Maps names to\n//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type\n//   associated with that name. Their order is significant—it\n//   determines which [parse rules](#model.NodeSpec.parseDOM) take\n//   precedence by default, and which nodes come first in a given\n//   [group](#model.NodeSpec.group).\n//\n//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>\n//   The mark types that exist in this schema. The order in which they\n//   are provided determines the order in which [mark\n//   sets](#model.Mark.addToSet) are sorted and in which [parse\n//   rules](#model.MarkSpec.parseDOM) are tried.\n//\n//   topNode:: ?string\n//   The name of the default top-level node for the schema. Defaults\n//   to `\"doc\"`.\n\n// NodeSpec:: interface\n//\n//   content:: ?string\n//   The content expression for this node, as described in the [schema\n//   guide](/docs/guide/#schema.content_expressions). When not given,\n//   the node does not allow any content.\n//\n//   marks:: ?string\n//   The marks that are allowed inside of this node. May be a\n//   space-separated string referring to mark names or groups, `\"_\"`\n//   to explicitly allow all marks, or `\"\"` to disallow marks. When\n//   not given, nodes with inline content default to allowing all\n//   marks, other nodes default to not allowing marks.\n//\n//   group:: ?string\n//   The group or space-separated groups to which this node belongs,\n//   which can be referred to in the content expressions for the\n//   schema.\n//\n//   inline:: ?bool\n//   Should be set to true for inline nodes. (Implied for text nodes.)\n//\n//   atom:: ?bool\n//   Can be set to true to indicate that, though this isn't a [leaf\n//   node](#model.NodeType.isLeaf), it doesn't have directly editable\n//   content and should be treated as a single unit in the view.\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that nodes of this type get.\n//\n//   selectable:: ?bool\n//   Controls whether nodes of this type can be selected as a [node\n//   selection](#state.NodeSelection). Defaults to true for non-text\n//   nodes.\n//\n//   draggable:: ?bool\n//   Determines whether nodes of this type can be dragged without\n//   being selected. Defaults to false.\n//\n//   code:: ?bool\n//   Can be used to indicate that this node contains code, which\n//   causes some commands to behave differently.\n//\n//   defining:: ?bool\n//   Determines whether this node is considered an important parent\n//   node during replace operations (such as paste). Non-defining (the\n//   default) nodes get dropped when their entire content is replaced,\n//   whereas defining nodes persist and wrap the inserted content.\n//   Likewise, in _inserted_ content the defining parents of the\n//   content are preserved when possible. Typically,\n//   non-default-paragraph textblock types, and possibly list items,\n//   are marked as defining.\n//\n//   isolating:: ?bool\n//   When enabled (default is false), the sides of nodes of this type\n//   count as boundaries that regular editing operations, like\n//   backspacing or lifting, won't cross. An example of a node that\n//   should probably have this enabled is a table cell.\n//\n//   toDOM:: ?(node: Node) → DOMOutputSpec\n//   Defines the default way a node of this type should be serialized\n//   to DOM/HTML (as used by\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\n//   Should return a DOM node or an [array\n//   structure](#model.DOMOutputSpec) that describes one, with an\n//   optional number zero (“hole”) in it to indicate where the node's\n//   content should be inserted.\n//\n//   For text nodes, the default is to create a text DOM node. Though\n//   it is possible to create a serializer where text is rendered\n//   differently, this is not supported inside the editor, so you\n//   shouldn't override that in your text node spec.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this node, which can be\n//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\n//   automatically derive a parser. The `node` field in the rules is\n//   implied (the name of this node will be filled in automatically).\n//   If you supply your own parser, you do not need to also specify\n//   parsing rules in your schema.\n//\n//   toDebugString:: ?(node: Node) -> string\n//   Defines the default way a node of this type should be serialized\n//   to a string representation for debugging (e.g. in error messages).\n\n// MarkSpec:: interface\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that marks of this type get.\n//\n//   inclusive:: ?bool\n//   Whether this mark should be active when the cursor is positioned\n//   at its end (or at its start when that is also the start of the\n//   parent node). Defaults to true.\n//\n//   excludes:: ?string\n//   Determines which other marks this mark can coexist with. Should\n//   be a space-separated strings naming other marks or groups of marks.\n//   When a mark is [added](#model.Mark.addToSet) to a set, all marks\n//   that it excludes are removed in the process. If the set contains\n//   any mark that excludes the new mark but is not, itself, excluded\n//   by the new mark, the mark can not be added an the set. You can\n//   use the value `\"_\"` to indicate that the mark excludes all\n//   marks in the schema.\n//\n//   Defaults to only being exclusive with marks of the same type. You\n//   can set it to an empty string (or any string not containing the\n//   mark's own name) to allow multiple marks of a given type to\n//   coexist (as long as they have different attributes).\n//\n//   group:: ?string\n//   The group or space-separated groups to which this mark belongs.\n//\n//   spanning:: ?bool\n//   Determines whether marks of this type can span multiple adjacent\n//   nodes when serialized to DOM/HTML. Defaults to true.\n//\n//   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec\n//   Defines the default way marks of this type should be serialized\n//   to DOM/HTML. When the resulting spec contains a hole, that is\n//   where the marked content is placed. Otherwise, it is appended to\n//   the top node.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this mark (see the\n//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The\n//   `mark` field in the rules is implied.\n\n// AttributeSpec:: interface\n//\n// Used to [define](#model.NodeSpec.attrs) attributes on nodes or\n// marks.\n//\n//   default:: ?any\n//   The default value for this attribute, to use when no explicit\n//   value is provided. Attributes that have no default must be\n//   provided whenever a node or mark of a type that has them is\n//   created.\n\n// ::- A document schema. Holds [node](#model.NodeType) and [mark\n// type](#model.MarkType) objects for the nodes and marks that may\n// occur in conforming documents, and provides functionality for\n// creating and deserializing such documents.\nexport class Schema {\n  // :: (SchemaSpec)\n  // Construct a schema from a schema [specification](#model.SchemaSpec).\n  constructor(spec) {\n    // :: SchemaSpec\n    // The [spec](#model.SchemaSpec) on which the schema is based,\n    // with the added guarantee that its `nodes` and `marks`\n    // properties are\n    // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\n    // (not raw objects).\n    this.spec = {}\n    for (let prop in spec) this.spec[prop] = spec[prop]\n    this.spec.nodes = OrderedMap.from(spec.nodes)\n    this.spec.marks = OrderedMap.from(spec.marks)\n\n    // :: Object<NodeType>\n    // An object mapping the schema's node names to node type objects.\n    this.nodes = NodeType.compile(this.spec.nodes, this)\n\n    // :: Object<MarkType>\n    // A map from mark names to mark type objects.\n    this.marks = MarkType.compile(this.spec.marks, this)\n\n    let contentExprCache = Object.create(null)\n    for (let prop in this.nodes) {\n      if (prop in this.marks)\n        throw new RangeError(prop + \" can not be both a node and a mark\")\n      let type = this.nodes[prop], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks\n      type.contentMatch = contentExprCache[contentExpr] ||\n        (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes))\n      type.inlineContent = type.contentMatch.inlineContent\n      type.markSet = markExpr == \"_\" ? null :\n        markExpr ? gatherMarks(this, markExpr.split(\" \")) :\n        markExpr == \"\" || !type.inlineContent ? [] : null\n    }\n    for (let prop in this.marks) {\n      let type = this.marks[prop], excl = type.spec.excludes\n      type.excluded = excl == null ? [type] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"))\n    }\n\n    this.nodeFromJSON = this.nodeFromJSON.bind(this)\n    this.markFromJSON = this.markFromJSON.bind(this)\n\n    // :: NodeType\n    // The type of the [default top node](#model.SchemaSpec.topNode)\n    // for this schema.\n    this.topNodeType = this.nodes[this.spec.topNode || \"doc\"]\n\n    // :: Object\n    // An object for storing whatever values modules may want to\n    // compute and cache per schema. (If you want to store something\n    // in it, try to use property names unlikely to clash.)\n    this.cached = Object.create(null)\n    this.cached.wrappings = Object.create(null)\n  }\n\n  // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node\n  // Create a node in this schema. The `type` may be a string or a\n  // `NodeType` instance. Attributes will be extended\n  // with defaults, `content` may be a `Fragment`,\n  // `null`, a `Node`, or an array of nodes.\n  node(type, attrs, content, marks) {\n    if (typeof type == \"string\")\n      type = this.nodeType(type)\n    else if (!(type instanceof NodeType))\n      throw new RangeError(\"Invalid node type: \" + type)\n    else if (type.schema != this)\n      throw new RangeError(\"Node type from different schema used (\" + type.name + \")\")\n\n    return type.createChecked(attrs, content, marks)\n  }\n\n  // :: (string, ?[Mark]) → Node\n  // Create a text node in the schema. Empty text nodes are not\n  // allowed.\n  text(text, marks) {\n    let type = this.nodes.text\n    return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks))\n  }\n\n  // :: (union<string, MarkType>, ?Object) → Mark\n  // Create a mark with the given type and attributes.\n  mark(type, attrs) {\n    if (typeof type == \"string\") type = this.marks[type]\n    return type.create(attrs)\n  }\n\n  // :: (Object) → Node\n  // Deserialize a node from its JSON representation. This method is\n  // bound.\n  nodeFromJSON(json) {\n    return Node.fromJSON(this, json)\n  }\n\n  // :: (Object) → Mark\n  // Deserialize a mark from its JSON representation. This method is\n  // bound.\n  markFromJSON(json) {\n    return Mark.fromJSON(this, json)\n  }\n\n  nodeType(name) {\n    let found = this.nodes[name]\n    if (!found) throw new RangeError(\"Unknown node type: \" + name)\n    return found\n  }\n}\n\nfunction gatherMarks(schema, marks) {\n  let found = []\n  for (let i = 0; i < marks.length; i++) {\n    let name = marks[i], mark = schema.marks[name], ok = mark\n    if (mark) {\n      found.push(mark)\n    } else {\n      for (let prop in schema.marks) {\n        let mark = schema.marks[prop]\n        if (name == \"_\" || (mark.spec.group && mark.spec.group.split(\" \").indexOf(name) > -1))\n          found.push(ok = mark)\n      }\n    }\n    if (!ok) throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\")\n  }\n  return found\n}\n","import { ReplaceError, Slice, Fragment, MarkType } from 'prosemirror-model';\n\n// Mappable:: interface\n// There are several things that positions can be mapped through.\n// Such objects conform to this interface.\n//\n//   map:: (pos: number, assoc: ?number) → number\n//   Map a position through this object. When given, `assoc` (should\n//   be -1 or 1, defaults to 1) determines with which side the\n//   position is associated, which determines in which direction to\n//   move when a chunk of content is inserted at the mapped position.\n//\n//   mapResult:: (pos: number, assoc: ?number) → MapResult\n//   Map a position, and return an object containing additional\n//   information about the mapping. The result's `deleted` field tells\n//   you whether the position was deleted (completely enclosed in a\n//   replaced range) during the mapping. When content on only one side\n//   is deleted, the position itself is only considered deleted when\n//   `assoc` points in the direction of the deleted content.\n\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\n\nvar lower16 = 0xffff;\nvar factor16 = Math.pow(2, 16);\n\nfunction makeRecover(index, offset) { return index + offset * factor16 }\nfunction recoverIndex(value) { return value & lower16 }\nfunction recoverOffset(value) { return (value - (value & lower16)) / factor16 }\n\n// ::- An object representing a mapped position with extra\n// information.\nvar MapResult = function MapResult(pos, deleted, recover) {\n  if ( deleted === void 0 ) deleted = false;\n  if ( recover === void 0 ) recover = null;\n\n  // :: number The mapped version of the position.\n  this.pos = pos;\n  // :: bool Tells you whether the position was deleted, that is,\n  // whether the step removed its surroundings from the document.\n  this.deleted = deleted;\n  this.recover = recover;\n};\n\n// :: class extends Mappable\n// A map describing the deletions and insertions made by a step, which\n// can be used to find the correspondence between positions in the\n// pre-step version of a document and the same position in the\n// post-step version.\nvar StepMap = function StepMap(ranges, inverted) {\n  if ( inverted === void 0 ) inverted = false;\n\n  this.ranges = ranges;\n  this.inverted = inverted;\n};\n\nStepMap.prototype.recover = function recover (value) {\n  var diff = 0, index = recoverIndex(value);\n  if (!this.inverted) { for (var i = 0; i < index; i++)\n    { diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1]; } }\n  return this.ranges[index * 3] + diff + recoverOffset(value)\n};\n\n// : (number, ?number) → MapResult\nStepMap.prototype.mapResult = function mapResult (pos, assoc) {\n  if ( assoc === void 0 ) assoc = 1;\n return this._map(pos, assoc, false) };\n\n// : (number, ?number) → number\nStepMap.prototype.map = function map (pos, assoc) {\n  if ( assoc === void 0 ) assoc = 1;\n return this._map(pos, assoc, true) };\n\nStepMap.prototype._map = function _map (pos, assoc, simple) {\n  var diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;\n  for (var i = 0; i < this.ranges.length; i += 3) {\n    var start = this.ranges[i] - (this.inverted ? diff : 0);\n    if (start > pos) { break }\n    var oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize;\n    if (pos <= end) {\n      var side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;\n      var result = start + diff + (side < 0 ? 0 : newSize);\n      if (simple) { return result }\n      var recover = makeRecover(i / 3, pos - start);\n      return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover)\n    }\n    diff += newSize - oldSize;\n  }\n  return simple ? pos + diff : new MapResult(pos + diff)\n};\n\nStepMap.prototype.touches = function touches (pos, recover) {\n  var diff = 0, index = recoverIndex(recover);\n  var oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;\n  for (var i = 0; i < this.ranges.length; i += 3) {\n    var start = this.ranges[i] - (this.inverted ? diff : 0);\n    if (start > pos) { break }\n    var oldSize = this.ranges[i + oldIndex], end = start + oldSize;\n    if (pos <= end && i == index * 3) { return true }\n    diff += this.ranges[i + newIndex] - oldSize;\n  }\n  return false\n};\n\n// :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))\n// Calls the given function on each of the changed ranges included in\n// this map.\nStepMap.prototype.forEach = function forEach (f) {\n  var oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;\n  for (var i = 0, diff = 0; i < this.ranges.length; i += 3) {\n    var start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);\n    var oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];\n    f(oldStart, oldStart + oldSize, newStart, newStart + newSize);\n    diff += newSize - oldSize;\n  }\n};\n\n// :: () → StepMap\n// Create an inverted version of this map. The result can be used to\n// map positions in the post-step document to the pre-step document.\nStepMap.prototype.invert = function invert () {\n  return new StepMap(this.ranges, !this.inverted)\n};\n\nStepMap.prototype.toString = function toString () {\n  return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges)\n};\n\n// :: (n: number) → StepMap\n// Create a map that moves all positions by offset `n` (which may be\n// negative). This can be useful when applying steps meant for a\n// sub-document to a larger document, or vice-versa.\nStepMap.offset = function offset (n) {\n  return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n])\n};\n\nStepMap.empty = new StepMap([]);\n\n// :: class extends Mappable\n// A mapping represents a pipeline of zero or more [step\n// maps](#transform.StepMap). It has special provisions for losslessly\n// handling mapping positions through a series of steps in which some\n// steps are inverted versions of earlier steps. (This comes up when\n// ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for\n// collaboration or history management.)\nvar Mapping = function Mapping(maps, mirror, from, to) {\n  // :: [StepMap]\n  // The step maps in this mapping.\n  this.maps = maps || [];\n  // :: number\n  // The starting position in the `maps` array, used when `map` or\n  // `mapResult` is called.\n  this.from = from || 0;\n  // :: number\n  // The end position in the `maps` array.\n  this.to = to == null ? this.maps.length : to;\n  this.mirror = mirror;\n};\n\n// :: (?number, ?number) → Mapping\n// Create a mapping that maps only through a part of this one.\nMapping.prototype.slice = function slice (from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.maps.length;\n\n  return new Mapping(this.maps, this.mirror, from, to)\n};\n\nMapping.prototype.copy = function copy () {\n  return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to)\n};\n\n// :: (StepMap, ?number)\n// Add a step map to the end of this mapping. If `mirrors` is\n// given, it should be the index of the step map that is the mirror\n// image of this one.\nMapping.prototype.appendMap = function appendMap (map, mirrors) {\n  this.to = this.maps.push(map);\n  if (mirrors != null) { this.setMirror(this.maps.length - 1, mirrors); }\n};\n\n// :: (Mapping)\n// Add all the step maps in a given mapping to this one (preserving\n// mirroring information).\nMapping.prototype.appendMapping = function appendMapping (mapping) {\n  for (var i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {\n    var mirr = mapping.getMirror(i);\n    this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null);\n  }\n};\n\n// :: (number) → ?number\n// Finds the offset of the step map that mirrors the map at the\n// given offset, in this mapping (as per the second argument to\n// `appendMap`).\nMapping.prototype.getMirror = function getMirror (n) {\n  if (this.mirror) { for (var i = 0; i < this.mirror.length; i++)\n    { if (this.mirror[i] == n) { return this.mirror[i + (i % 2 ? -1 : 1)] } } }\n};\n\nMapping.prototype.setMirror = function setMirror (n, m) {\n  if (!this.mirror) { this.mirror = []; }\n  this.mirror.push(n, m);\n};\n\n// :: (Mapping)\n// Append the inverse of the given mapping to this one.\nMapping.prototype.appendMappingInverted = function appendMappingInverted (mapping) {\n  for (var i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {\n    var mirr = mapping.getMirror(i);\n    this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null);\n  }\n};\n\n// :: () → Mapping\n// Create an inverted version of this mapping.\nMapping.prototype.invert = function invert () {\n  var inverse = new Mapping;\n  inverse.appendMappingInverted(this);\n  return inverse\n};\n\n// : (number, ?number) → number\n// Map a position through this mapping.\nMapping.prototype.map = function map (pos, assoc) {\n    if ( assoc === void 0 ) assoc = 1;\n\n  if (this.mirror) { return this._map(pos, assoc, true) }\n  for (var i = this.from; i < this.to; i++)\n    { pos = this.maps[i].map(pos, assoc); }\n  return pos\n};\n\n// : (number, ?number) → MapResult\n// Map a position through this mapping, returning a mapping\n// result.\nMapping.prototype.mapResult = function mapResult (pos, assoc) {\n  if ( assoc === void 0 ) assoc = 1;\n return this._map(pos, assoc, false) };\n\nMapping.prototype._map = function _map (pos, assoc, simple) {\n  var deleted = false, recoverables = null;\n\n  for (var i = this.from; i < this.to; i++) {\n    var map = this.maps[i], rec = recoverables && recoverables[i];\n    if (rec != null && map.touches(pos, rec)) {\n      pos = map.recover(rec);\n      continue\n    }\n\n    var result = map.mapResult(pos, assoc);\n    if (result.recover != null) {\n      var corr = this.getMirror(i);\n      if (corr != null && corr > i && corr < this.to) {\n        if (result.deleted) {\n          i = corr;\n          pos = this.maps[corr].recover(result.recover);\n          continue\n        } else {\n(recoverables || (recoverables = Object.create(null)))[corr] = result.recover;\n        }\n      }\n    }\n\n    if (result.deleted) { deleted = true; }\n    pos = result.pos;\n  }\n\n  return simple ? pos : new MapResult(pos, deleted)\n};\n\nfunction TransformError(message) {\n  var err = Error.call(this, message);\n  err.__proto__ = TransformError.prototype;\n  return err\n}\n\nTransformError.prototype = Object.create(Error.prototype);\nTransformError.prototype.constructor = TransformError;\nTransformError.prototype.name = \"TransformError\";\n\n// ::- Abstraction to build up and track an array of\n// [steps](#transform.Step) representing a document transformation.\n//\n// Most transforming methods return the `Transform` object itself, so\n// that they can be chained.\nvar Transform = function Transform(doc) {\n  // :: Node\n  // The current document (the result of applying the steps in the\n  // transform).\n  this.doc = doc;\n  // :: [Step]\n  // The steps in this transform.\n  this.steps = [];\n  // :: [Node]\n  // The documents before each of the steps.\n  this.docs = [];\n  // :: Mapping\n  // A mapping with the maps for each of the steps in this transform.\n  this.mapping = new Mapping;\n};\n\nvar prototypeAccessors = { before: { configurable: true },docChanged: { configurable: true } };\n\n// :: Node The starting document.\nprototypeAccessors.before.get = function () { return this.docs.length ? this.docs[0] : this.doc };\n\n// :: (step: Step) → this\n// Apply a new step in this transform, saving the result. Throws an\n// error when the step fails.\nTransform.prototype.step = function step (object) {\n  var result = this.maybeStep(object);\n  if (result.failed) { throw new TransformError(result.failed) }\n  return this\n};\n\n// :: (Step) → StepResult\n// Try to apply a step in this transformation, ignoring it if it\n// fails. Returns the step result.\nTransform.prototype.maybeStep = function maybeStep (step) {\n  var result = step.apply(this.doc);\n  if (!result.failed) { this.addStep(step, result.doc); }\n  return result\n};\n\n// :: bool\n// True when the document has been changed (when there are any\n// steps).\nprototypeAccessors.docChanged.get = function () {\n  return this.steps.length > 0\n};\n\nTransform.prototype.addStep = function addStep (step, doc) {\n  this.docs.push(this.doc);\n  this.steps.push(step);\n  this.mapping.appendMap(step.getMap());\n  this.doc = doc;\n};\n\nObject.defineProperties( Transform.prototype, prototypeAccessors );\n\nfunction mustOverride() { throw new Error(\"Override me\") }\n\nvar stepsByID = Object.create(null);\n\n// ::- A step object represents an atomic change. It generally applies\n// only to the document it was created for, since the positions\n// stored in it will only make sense for that document.\n//\n// New steps are defined by creating classes that extend `Step`,\n// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\n// methods, and registering your class with a unique\n// JSON-serialization identifier using\n// [`Step.jsonID`](#transform.Step^jsonID).\nvar Step = function Step () {};\n\nStep.prototype.apply = function apply (_doc) { return mustOverride() };\n\n// :: () → StepMap\n// Get the step map that represents the changes made by this step,\n// and which can be used to transform between positions in the old\n// and the new document.\nStep.prototype.getMap = function getMap () { return StepMap.empty };\n\n// :: (doc: Node) → Step\n// Create an inverted version of this step. Needs the document as it\n// was before the step as argument.\nStep.prototype.invert = function invert (_doc) { return mustOverride() };\n\n// :: (mapping: Mappable) → ?Step\n// Map this step through a mappable thing, returning either a\n// version of that step with its positions adjusted, or `null` if\n// the step was entirely deleted by the mapping.\nStep.prototype.map = function map (_mapping) { return mustOverride() };\n\n// :: (other: Step) → ?Step\n// Try to merge this step with another one, to be applied directly\n// after it. Returns the merged step when possible, null if the\n// steps can't be merged.\nStep.prototype.merge = function merge (_other) { return null };\n\n// :: () → Object\n// Create a JSON-serializeable representation of this step. When\n// defining this for a custom subclass, make sure the result object\n// includes the step type's [JSON id](#transform.Step^jsonID) under\n// the `stepType` property.\nStep.prototype.toJSON = function toJSON () { return mustOverride() };\n\n// :: (Schema, Object) → Step\n// Deserialize a step from its JSON representation. Will call\n// through to the step class' own implementation of this method.\nStep.fromJSON = function fromJSON (schema, json) {\n  if (!json || !json.stepType) { throw new RangeError(\"Invalid input for Step.fromJSON\") }\n  var type = stepsByID[json.stepType];\n  if (!type) { throw new RangeError((\"No step type \" + (json.stepType) + \" defined\")) }\n  return type.fromJSON(schema, json)\n};\n\n// :: (string, constructor<Step>)\n// To be able to serialize steps to JSON, each step needs a string\n// ID to attach to its JSON representation. Use this method to\n// register an ID for your step classes. Try to pick something\n// that's unlikely to clash with steps from other modules.\nStep.jsonID = function jsonID (id, stepClass) {\n  if (id in stepsByID) { throw new RangeError(\"Duplicate use of step JSON ID \" + id) }\n  stepsByID[id] = stepClass;\n  stepClass.prototype.jsonID = id;\n  return stepClass\n};\n\n// ::- The result of [applying](#transform.Step.apply) a step. Contains either a\n// new document or a failure value.\nvar StepResult = function StepResult(doc, failed) {\n  // :: ?Node The transformed document.\n  this.doc = doc;\n  // :: ?string Text providing information about a failed step.\n  this.failed = failed;\n};\n\n// :: (Node) → StepResult\n// Create a successful step result.\nStepResult.ok = function ok (doc) { return new StepResult(doc, null) };\n\n// :: (string) → StepResult\n// Create a failed step result.\nStepResult.fail = function fail (message) { return new StepResult(null, message) };\n\n// :: (Node, number, number, Slice) → StepResult\n// Call [`Node.replace`](#model.Node.replace) with the given\n// arguments. Create a successful result if it succeeds, and a\n// failed one if it throws a `ReplaceError`.\nStepResult.fromReplace = function fromReplace (doc, from, to, slice) {\n  try {\n    return StepResult.ok(doc.replace(from, to, slice))\n  } catch (e) {\n    if (e instanceof ReplaceError) { return StepResult.fail(e.message) }\n    throw e\n  }\n};\n\n// ::- Replace a part of the document with a slice of new content.\nvar ReplaceStep = /*@__PURE__*/(function (Step) {\n  function ReplaceStep(from, to, slice, structure) {\n    Step.call(this);\n    this.from = from;\n    this.to = to;\n    this.slice = slice;\n    this.structure = !!structure;\n  }\n\n  if ( Step ) ReplaceStep.__proto__ = Step;\n  ReplaceStep.prototype = Object.create( Step && Step.prototype );\n  ReplaceStep.prototype.constructor = ReplaceStep;\n\n  ReplaceStep.prototype.apply = function apply (doc) {\n    if (this.structure && contentBetween(doc, this.from, this.to))\n      { return StepResult.fail(\"Structure replace would overwrite content\") }\n    return StepResult.fromReplace(doc, this.from, this.to, this.slice)\n  };\n\n  ReplaceStep.prototype.getMap = function getMap () {\n    return new StepMap([this.from, this.to - this.from, this.slice.size])\n  };\n\n  ReplaceStep.prototype.invert = function invert (doc) {\n    return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to))\n  };\n\n  ReplaceStep.prototype.map = function map (mapping) {\n    var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);\n    if (from.deleted && to.deleted) { return null }\n    return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice)\n  };\n\n  ReplaceStep.prototype.merge = function merge (other) {\n    if (!(other instanceof ReplaceStep) || other.structure != this.structure) { return null }\n\n    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n      var slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);\n      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure)\n    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n      var slice$1 = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);\n      return new ReplaceStep(other.from, this.to, slice$1, this.structure)\n    } else {\n      return null\n    }\n  };\n\n  ReplaceStep.prototype.toJSON = function toJSON () {\n    var json = {stepType: \"replace\", from: this.from, to: this.to};\n    if (this.slice.size) { json.slice = this.slice.toJSON(); }\n    if (this.structure) { json.structure = true; }\n    return json\n  };\n\n  ReplaceStep.fromJSON = function fromJSON (schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      { throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\") }\n    return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure)\n  };\n\n  return ReplaceStep;\n}(Step));\n\nStep.jsonID(\"replace\", ReplaceStep);\n\n// ::- Replace a part of the document with a slice of content, but\n// preserve a range of the replaced content by moving it into the\n// slice.\nvar ReplaceAroundStep = /*@__PURE__*/(function (Step) {\n  function ReplaceAroundStep(from, to, gapFrom, gapTo, slice, insert, structure) {\n    Step.call(this);\n    this.from = from;\n    this.to = to;\n    this.gapFrom = gapFrom;\n    this.gapTo = gapTo;\n    this.slice = slice;\n    this.insert = insert;\n    this.structure = !!structure;\n  }\n\n  if ( Step ) ReplaceAroundStep.__proto__ = Step;\n  ReplaceAroundStep.prototype = Object.create( Step && Step.prototype );\n  ReplaceAroundStep.prototype.constructor = ReplaceAroundStep;\n\n  ReplaceAroundStep.prototype.apply = function apply (doc) {\n    if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||\n                           contentBetween(doc, this.gapTo, this.to)))\n      { return StepResult.fail(\"Structure gap-replace would overwrite content\") }\n\n    var gap = doc.slice(this.gapFrom, this.gapTo);\n    if (gap.openStart || gap.openEnd)\n      { return StepResult.fail(\"Gap is not a flat range\") }\n    var inserted = this.slice.insertAt(this.insert, gap.content);\n    if (!inserted) { return StepResult.fail(\"Content does not fit in gap\") }\n    return StepResult.fromReplace(doc, this.from, this.to, inserted)\n  };\n\n  ReplaceAroundStep.prototype.getMap = function getMap () {\n    return new StepMap([this.from, this.gapFrom - this.from, this.insert,\n                        this.gapTo, this.to - this.gapTo, this.slice.size - this.insert])\n  };\n\n  ReplaceAroundStep.prototype.invert = function invert (doc) {\n    var gap = this.gapTo - this.gapFrom;\n    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap,\n                                 this.from + this.insert, this.from + this.insert + gap,\n                                 doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from),\n                                 this.gapFrom - this.from, this.structure)\n  };\n\n  ReplaceAroundStep.prototype.map = function map (mapping) {\n    var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);\n    var gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);\n    if ((from.deleted && to.deleted) || gapFrom < from.pos || gapTo > to.pos) { return null }\n    return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure)\n  };\n\n  ReplaceAroundStep.prototype.toJSON = function toJSON () {\n    var json = {stepType: \"replaceAround\", from: this.from, to: this.to,\n                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert};\n    if (this.slice.size) { json.slice = this.slice.toJSON(); }\n    if (this.structure) { json.structure = true; }\n    return json\n  };\n\n  ReplaceAroundStep.fromJSON = function fromJSON (schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\" ||\n        typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\")\n      { throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\") }\n    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo,\n                                 Slice.fromJSON(schema, json.slice), json.insert, !!json.structure)\n  };\n\n  return ReplaceAroundStep;\n}(Step));\n\nStep.jsonID(\"replaceAround\", ReplaceAroundStep);\n\nfunction contentBetween(doc, from, to) {\n  var $from = doc.resolve(from), dist = to - from, depth = $from.depth;\n  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n    depth--;\n    dist--;\n  }\n  if (dist > 0) {\n    var next = $from.node(depth).maybeChild($from.indexAfter(depth));\n    while (dist > 0) {\n      if (!next || next.isLeaf) { return true }\n      next = next.firstChild;\n      dist--;\n    }\n  }\n  return false\n}\n\nfunction canCut(node, start, end) {\n  return (start == 0 || node.canReplace(start, node.childCount)) &&\n    (end == node.childCount || node.canReplace(0, end))\n}\n\n// :: (NodeRange) → ?number\n// Try to find a target depth to which the content in the given range\n// can be lifted. Will not go across\n// [isolating](#model.NodeSpec.isolating) parent nodes.\nfunction liftTarget(range) {\n  var parent = range.parent;\n  var content = parent.content.cutByIndex(range.startIndex, range.endIndex);\n  for (var depth = range.depth;; --depth) {\n    var node = range.$from.node(depth);\n    var index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);\n    if (depth < range.depth && node.canReplace(index, endIndex, content))\n      { return depth }\n    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) { break }\n  }\n}\n\n// :: (NodeRange, number) → this\n// Split the content in the given range off from its parent, if there\n// is sibling content before or after it, and move it up the tree to\n// the depth specified by `target`. You'll probably want to use\n// [`liftTarget`](#transform.liftTarget) to compute `target`, to make\n// sure the lift is valid.\nTransform.prototype.lift = function(range, target) {\n  var $from = range.$from;\n  var $to = range.$to;\n  var depth = range.depth;\n\n  var gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);\n  var start = gapStart, end = gapEnd;\n\n  var before = Fragment.empty, openStart = 0;\n  for (var d = depth, splitting = false; d > target; d--)\n    { if (splitting || $from.index(d) > 0) {\n      splitting = true;\n      before = Fragment.from($from.node(d).copy(before));\n      openStart++;\n    } else {\n      start--;\n    } }\n  var after = Fragment.empty, openEnd = 0;\n  for (var d$1 = depth, splitting$1 = false; d$1 > target; d$1--)\n    { if (splitting$1 || $to.after(d$1 + 1) < $to.end(d$1)) {\n      splitting$1 = true;\n      after = Fragment.from($to.node(d$1).copy(after));\n      openEnd++;\n    } else {\n      end++;\n    } }\n\n  return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd,\n                                         new Slice(before.append(after), openStart, openEnd),\n                                         before.size - openStart, true))\n};\n\n// :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]\n// Try to find a valid way to wrap the content in the given range in a\n// node of the given type. May introduce extra nodes around and inside\n// the wrapper node, if necessary. Returns null if no valid wrapping\n// could be found. When `innerRange` is given, that range's content is\n// used as the content to fit into the wrapping, instead of the\n// content of `range`.\nfunction findWrapping(range, nodeType, attrs, innerRange) {\n  if ( innerRange === void 0 ) innerRange = range;\n\n  var around = findWrappingOutside(range, nodeType);\n  var inner = around && findWrappingInside(innerRange, nodeType);\n  if (!inner) { return null }\n  return around.map(withAttrs).concat({type: nodeType, attrs: attrs}).concat(inner.map(withAttrs))\n}\n\nfunction withAttrs(type) { return {type: type, attrs: null} }\n\nfunction findWrappingOutside(range, type) {\n  var parent = range.parent;\n  var startIndex = range.startIndex;\n  var endIndex = range.endIndex;\n  var around = parent.contentMatchAt(startIndex).findWrapping(type);\n  if (!around) { return null }\n  var outer = around.length ? around[0] : type;\n  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null\n}\n\nfunction findWrappingInside(range, type) {\n  var parent = range.parent;\n  var startIndex = range.startIndex;\n  var endIndex = range.endIndex;\n  var inner = parent.child(startIndex);\n  var inside = type.contentMatch.findWrapping(inner.type);\n  if (!inside) { return null }\n  var lastType = inside.length ? inside[inside.length - 1] : type;\n  var innerMatch = lastType.contentMatch;\n  for (var i = startIndex; innerMatch && i < endIndex; i++)\n    { innerMatch = innerMatch.matchType(parent.child(i).type); }\n  if (!innerMatch || !innerMatch.validEnd) { return null }\n  return inside\n}\n\n// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this\n// Wrap the given [range](#model.NodeRange) in the given set of wrappers.\n// The wrappers are assumed to be valid in this position, and should\n// probably be computed with [`findWrapping`](#transform.findWrapping).\nTransform.prototype.wrap = function(range, wrappers) {\n  var content = Fragment.empty;\n  for (var i = wrappers.length - 1; i >= 0; i--)\n    { content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content)); }\n\n  var start = range.start, end = range.end;\n  return this.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true))\n};\n\n// :: (number, ?number, NodeType, ?Object) → this\n// Set the type of all textblocks (partly) between `from` and `to` to\n// the given node type with the given attributes.\nTransform.prototype.setBlockType = function(from, to, type, attrs) {\n  var this$1 = this;\n  if ( to === void 0 ) to = from;\n\n  if (!type.isTextblock) { throw new RangeError(\"Type given to setBlockType should be a textblock\") }\n  var mapFrom = this.steps.length;\n  this.doc.nodesBetween(from, to, function (node, pos) {\n    if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this$1.doc, this$1.mapping.slice(mapFrom).map(pos), type)) {\n      // Ensure all markup that isn't allowed in the new node type is cleared\n      this$1.clearIncompatible(this$1.mapping.slice(mapFrom).map(pos, 1), type);\n      var mapping = this$1.mapping.slice(mapFrom);\n      var startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);\n      this$1.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1,\n                                      new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));\n      return false\n    }\n  });\n  return this\n};\n\nfunction canChangeType(doc, pos, type) {\n  var $pos = doc.resolve(pos), index = $pos.index();\n  return $pos.parent.canReplaceWith(index, index + 1, type)\n}\n\n// :: (number, ?NodeType, ?Object, ?[Mark]) → this\n// Change the type, attributes, and/or marks of the node at `pos`.\n// When `type` isn't given, the existing node type is preserved,\nTransform.prototype.setNodeMarkup = function(pos, type, attrs, marks) {\n  var node = this.doc.nodeAt(pos);\n  if (!node) { throw new RangeError(\"No node at given position\") }\n  if (!type) { type = node.type; }\n  var newNode = type.create(attrs, null, marks || node.marks);\n  if (node.isLeaf)\n    { return this.replaceWith(pos, pos + node.nodeSize, newNode) }\n\n  if (!type.validContent(node.content))\n    { throw new RangeError(\"Invalid content for node type \" + type.name) }\n\n  return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1,\n                                         new Slice(Fragment.from(newNode), 0, 0), 1, true))\n};\n\n// :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool\n// Check whether splitting at the given position is allowed.\nfunction canSplit(doc, pos, depth, typesAfter) {\n  if ( depth === void 0 ) depth = 1;\n\n  var $pos = doc.resolve(pos), base = $pos.depth - depth;\n  var innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;\n  if (base < 0 || $pos.parent.type.spec.isolating ||\n      !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||\n      !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))\n    { return false }\n  for (var d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n    var node = $pos.node(d), index$1 = $pos.index(d);\n    if (node.type.spec.isolating) { return false }\n    var rest = node.content.cutByIndex(index$1, node.childCount);\n    var after = (typesAfter && typesAfter[i]) || node;\n    if (after != node) { rest = rest.replaceChild(0, after.type.create(after.attrs)); }\n    if (!node.canReplace(index$1 + 1, node.childCount) || !after.type.validContent(rest))\n      { return false }\n  }\n  var index = $pos.indexAfter(base);\n  var baseType = typesAfter && typesAfter[0];\n  return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type)\n}\n\n// :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this\n// Split the node at the given position, and optionally, if `depth` is\n// greater than one, any number of nodes above that. By default, the\n// parts split off will inherit the node type of the original node.\n// This can be changed by passing an array of types and attributes to\n// use after the split.\nTransform.prototype.split = function(pos, depth, typesAfter) {\n  if ( depth === void 0 ) depth = 1;\n\n  var $pos = this.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty;\n  for (var d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n    before = Fragment.from($pos.node(d).copy(before));\n    var typeAfter = typesAfter && typesAfter[i];\n    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));\n  }\n  return this.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true))\n};\n\n// :: (Node, number) → bool\n// Test whether the blocks before and after a given position can be\n// joined.\nfunction canJoin(doc, pos) {\n  var $pos = doc.resolve(pos), index = $pos.index();\n  return joinable($pos.nodeBefore, $pos.nodeAfter) &&\n    $pos.parent.canReplace(index, index + 1)\n}\n\nfunction joinable(a, b) {\n  return a && b && !a.isLeaf && a.canAppend(b)\n}\n\n// :: (Node, number, ?number) → ?number\n// Find an ancestor of the given position that can be joined to the\n// block before (or after if `dir` is positive). Returns the joinable\n// point, if any.\nfunction joinPoint(doc, pos, dir) {\n  if ( dir === void 0 ) dir = -1;\n\n  var $pos = doc.resolve(pos);\n  for (var d = $pos.depth;; d--) {\n    var before = (void 0), after = (void 0), index = $pos.index(d);\n    if (d == $pos.depth) {\n      before = $pos.nodeBefore;\n      after = $pos.nodeAfter;\n    } else if (dir > 0) {\n      before = $pos.node(d + 1);\n      index++;\n      after = $pos.node(d).maybeChild(index);\n    } else {\n      before = $pos.node(d).maybeChild(index - 1);\n      after = $pos.node(d + 1);\n    }\n    if (before && !before.isTextblock && joinable(before, after) &&\n        $pos.node(d).canReplace(index, index + 1)) { return pos }\n    if (d == 0) { break }\n    pos = dir < 0 ? $pos.before(d) : $pos.after(d);\n  }\n}\n\n// :: (number, ?number) → this\n// Join the blocks around the given position. If depth is 2, their\n// last and first siblings are also joined, and so on.\nTransform.prototype.join = function(pos, depth) {\n  if ( depth === void 0 ) depth = 1;\n\n  var step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true);\n  return this.step(step)\n};\n\n// :: (Node, number, NodeType) → ?number\n// Try to find a point where a node of the given type can be inserted\n// near `pos`, by searching up the node hierarchy when `pos` itself\n// isn't a valid place but is at the start or end of a node. Return\n// null if no position was found.\nfunction insertPoint(doc, pos, nodeType) {\n  var $pos = doc.resolve(pos);\n  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) { return pos }\n\n  if ($pos.parentOffset == 0)\n    { for (var d = $pos.depth - 1; d >= 0; d--) {\n      var index = $pos.index(d);\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) { return $pos.before(d + 1) }\n      if (index > 0) { return null }\n    } }\n  if ($pos.parentOffset == $pos.parent.content.size)\n    { for (var d$1 = $pos.depth - 1; d$1 >= 0; d$1--) {\n      var index$1 = $pos.indexAfter(d$1);\n      if ($pos.node(d$1).canReplaceWith(index$1, index$1, nodeType)) { return $pos.after(d$1 + 1) }\n      if (index$1 < $pos.node(d$1).childCount) { return null }\n    } }\n}\n\n// :: (Node, number, Slice) → ?number\n// Finds a position at or around the given position where the given\n// slice can be inserted. Will look at parent nodes' nearest boundary\n// and try there, even if the original position wasn't directly at the\n// start or end of that node. Returns null when no position was found.\nfunction dropPoint(doc, pos, slice) {\n  var $pos = doc.resolve(pos);\n  if (!slice.content.size) { return pos }\n  var content = slice.content;\n  for (var i = 0; i < slice.openStart; i++) { content = content.firstChild.content; }\n  for (var pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n    for (var d = $pos.depth; d >= 0; d--) {\n      var bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;\n      var insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);\n      if (pass == 1\n          ? $pos.node(d).canReplace(insertPos, insertPos, content)\n          : $pos.node(d).contentMatchAt(insertPos).findWrapping(content.firstChild.type))\n        { return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1) }\n    }\n  }\n  return null\n}\n\nfunction mapFragment(fragment, f, parent) {\n  var mapped = [];\n  for (var i = 0; i < fragment.childCount; i++) {\n    var child = fragment.child(i);\n    if (child.content.size) { child = child.copy(mapFragment(child.content, f, child)); }\n    if (child.isInline) { child = f(child, parent, i); }\n    mapped.push(child);\n  }\n  return Fragment.fromArray(mapped)\n}\n\n// ::- Add a mark to all inline content between two positions.\nvar AddMarkStep = /*@__PURE__*/(function (Step) {\n  function AddMarkStep(from, to, mark) {\n    Step.call(this);\n    this.from = from;\n    this.to = to;\n    this.mark = mark;\n  }\n\n  if ( Step ) AddMarkStep.__proto__ = Step;\n  AddMarkStep.prototype = Object.create( Step && Step.prototype );\n  AddMarkStep.prototype.constructor = AddMarkStep;\n\n  AddMarkStep.prototype.apply = function apply (doc) {\n    var this$1 = this;\n\n    var oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from);\n    var parent = $from.node($from.sharedDepth(this.to));\n    var slice = new Slice(mapFragment(oldSlice.content, function (node, parent) {\n      if (!parent.type.allowsMarkType(this$1.mark.type)) { return node }\n      return node.mark(this$1.mark.addToSet(node.marks))\n    }, parent), oldSlice.openStart, oldSlice.openEnd);\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  };\n\n  AddMarkStep.prototype.invert = function invert () {\n    return new RemoveMarkStep(this.from, this.to, this.mark)\n  };\n\n  AddMarkStep.prototype.map = function map (mapping) {\n    var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);\n    if (from.deleted && to.deleted || from.pos >= to.pos) { return null }\n    return new AddMarkStep(from.pos, to.pos, this.mark)\n  };\n\n  AddMarkStep.prototype.merge = function merge (other) {\n    if (other instanceof AddMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      { return new AddMarkStep(Math.min(this.from, other.from),\n                             Math.max(this.to, other.to), this.mark) }\n  };\n\n  AddMarkStep.prototype.toJSON = function toJSON () {\n    return {stepType: \"addMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  };\n\n  AddMarkStep.fromJSON = function fromJSON (schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      { throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\") }\n    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  };\n\n  return AddMarkStep;\n}(Step));\n\nStep.jsonID(\"addMark\", AddMarkStep);\n\n// ::- Remove a mark from all inline content between two positions.\nvar RemoveMarkStep = /*@__PURE__*/(function (Step) {\n  function RemoveMarkStep(from, to, mark) {\n    Step.call(this);\n    this.from = from;\n    this.to = to;\n    this.mark = mark;\n  }\n\n  if ( Step ) RemoveMarkStep.__proto__ = Step;\n  RemoveMarkStep.prototype = Object.create( Step && Step.prototype );\n  RemoveMarkStep.prototype.constructor = RemoveMarkStep;\n\n  RemoveMarkStep.prototype.apply = function apply (doc) {\n    var this$1 = this;\n\n    var oldSlice = doc.slice(this.from, this.to);\n    var slice = new Slice(mapFragment(oldSlice.content, function (node) {\n      return node.mark(this$1.mark.removeFromSet(node.marks))\n    }), oldSlice.openStart, oldSlice.openEnd);\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  };\n\n  RemoveMarkStep.prototype.invert = function invert () {\n    return new AddMarkStep(this.from, this.to, this.mark)\n  };\n\n  RemoveMarkStep.prototype.map = function map (mapping) {\n    var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);\n    if (from.deleted && to.deleted || from.pos >= to.pos) { return null }\n    return new RemoveMarkStep(from.pos, to.pos, this.mark)\n  };\n\n  RemoveMarkStep.prototype.merge = function merge (other) {\n    if (other instanceof RemoveMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      { return new RemoveMarkStep(Math.min(this.from, other.from),\n                                Math.max(this.to, other.to), this.mark) }\n  };\n\n  RemoveMarkStep.prototype.toJSON = function toJSON () {\n    return {stepType: \"removeMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  };\n\n  RemoveMarkStep.fromJSON = function fromJSON (schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      { throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\") }\n    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  };\n\n  return RemoveMarkStep;\n}(Step));\n\nStep.jsonID(\"removeMark\", RemoveMarkStep);\n\n// :: (number, number, Mark) → this\n// Add the given mark to the inline content between `from` and `to`.\nTransform.prototype.addMark = function(from, to, mark) {\n  var this$1 = this;\n\n  var removed = [], added = [], removing = null, adding = null;\n  this.doc.nodesBetween(from, to, function (node, pos, parent) {\n    if (!node.isInline) { return }\n    var marks = node.marks;\n    if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n      var start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);\n      var newSet = mark.addToSet(marks);\n\n      for (var i = 0; i < marks.length; i++) {\n        if (!marks[i].isInSet(newSet)) {\n          if (removing && removing.to == start && removing.mark.eq(marks[i]))\n            { removing.to = end; }\n          else\n            { removed.push(removing = new RemoveMarkStep(start, end, marks[i])); }\n        }\n      }\n\n      if (adding && adding.to == start)\n        { adding.to = end; }\n      else\n        { added.push(adding = new AddMarkStep(start, end, mark)); }\n    }\n  });\n\n  removed.forEach(function (s) { return this$1.step(s); });\n  added.forEach(function (s) { return this$1.step(s); });\n  return this\n};\n\n// :: (number, number, ?union<Mark, MarkType>) → this\n// Remove marks from inline nodes between `from` and `to`. When `mark`\n// is a single mark, remove precisely that mark. When it is a mark type,\n// remove all marks of that type. When it is null, remove all marks of\n// any type.\nTransform.prototype.removeMark = function(from, to, mark) {\n  var this$1 = this;\n  if ( mark === void 0 ) mark = null;\n\n  var matched = [], step = 0;\n  this.doc.nodesBetween(from, to, function (node, pos) {\n    if (!node.isInline) { return }\n    step++;\n    var toRemove = null;\n    if (mark instanceof MarkType) {\n      var found = mark.isInSet(node.marks);\n      if (found) { toRemove = [found]; }\n    } else if (mark) {\n      if (mark.isInSet(node.marks)) { toRemove = [mark]; }\n    } else {\n      toRemove = node.marks;\n    }\n    if (toRemove && toRemove.length) {\n      var end = Math.min(pos + node.nodeSize, to);\n      for (var i = 0; i < toRemove.length; i++) {\n        var style = toRemove[i], found$1 = (void 0);\n        for (var j = 0; j < matched.length; j++) {\n          var m = matched[j];\n          if (m.step == step - 1 && style.eq(matched[j].style)) { found$1 = m; }\n        }\n        if (found$1) {\n          found$1.to = end;\n          found$1.step = step;\n        } else {\n          matched.push({style: style, from: Math.max(pos, from), to: end, step: step});\n        }\n      }\n    }\n  });\n  matched.forEach(function (m) { return this$1.step(new RemoveMarkStep(m.from, m.to, m.style)); });\n  return this\n};\n\n// :: (number, NodeType, ?ContentMatch) → this\n// Removes all marks and nodes from the content of the node at `pos`\n// that don't match the given new parent node type. Accepts an\n// optional starting [content match](#model.ContentMatch) as third\n// argument.\nTransform.prototype.clearIncompatible = function(pos, parentType, match) {\n  if ( match === void 0 ) match = parentType.contentMatch;\n\n  var node = this.doc.nodeAt(pos);\n  var delSteps = [], cur = pos + 1;\n  for (var i = 0; i < node.childCount; i++) {\n    var child = node.child(i), end = cur + child.nodeSize;\n    var allowed = match.matchType(child.type, child.attrs);\n    if (!allowed) {\n      delSteps.push(new ReplaceStep(cur, end, Slice.empty));\n    } else {\n      match = allowed;\n      for (var j = 0; j < child.marks.length; j++) { if (!parentType.allowsMarkType(child.marks[j].type))\n        { this.step(new RemoveMarkStep(cur, end, child.marks[j])); } }\n    }\n    cur = end;\n  }\n  if (!match.validEnd) {\n    var fill = match.fillBefore(Fragment.empty, true);\n    this.replace(cur, cur, new Slice(fill, 0, 0));\n  }\n  for (var i$1 = delSteps.length - 1; i$1 >= 0; i$1--) { this.step(delSteps[i$1]); }\n  return this\n};\n\n// :: (Node, number, ?number, ?Slice) → ?Step\n// ‘Fit’ a slice into a given position in the document, producing a\n// [step](#transform.Step) that inserts it. Will return null if\n// there's no meaningful way to insert the slice here, or inserting it\n// would be a no-op (an empty slice over an empty range).\nfunction replaceStep(doc, from, to, slice) {\n  if ( to === void 0 ) to = from;\n  if ( slice === void 0 ) slice = Slice.empty;\n\n  if (from == to && !slice.size) { return null }\n\n  var $from = doc.resolve(from), $to = doc.resolve(to);\n  // Optimization -- avoid work if it's obvious that it's not needed.\n  if (fitsTrivially($from, $to, slice)) { return new ReplaceStep(from, to, slice) }\n  var placed = placeSlice($from, slice);\n\n  var fittedLeft = fitLeft($from, placed);\n  var fitted = fitRight($from, $to, fittedLeft);\n  if (!fitted) { return null }\n  if (fittedLeft.size != fitted.size && canMoveText($from, $to, fittedLeft)) {\n    var d = $to.depth, after = $to.after(d);\n    while (d > 1 && after == $to.end(--d)) { ++after; }\n    var fittedAfter = fitRight($from, doc.resolve(after), fittedLeft);\n    if (fittedAfter)\n      { return new ReplaceAroundStep(from, after, to, $to.end(), fittedAfter, fittedLeft.size) }\n  }\n  return fitted.size || from != to ? new ReplaceStep(from, to, fitted) : null\n}\n\n// :: (number, ?number, ?Slice) → this\n// Replace the part of the document between `from` and `to` with the\n// given `slice`.\nTransform.prototype.replace = function(from, to, slice) {\n  if ( to === void 0 ) to = from;\n  if ( slice === void 0 ) slice = Slice.empty;\n\n  var step = replaceStep(this.doc, from, to, slice);\n  if (step) { this.step(step); }\n  return this\n};\n\n// :: (number, number, union<Fragment, Node, [Node]>) → this\n// Replace the given range with the given content, which may be a\n// fragment, node, or array of nodes.\nTransform.prototype.replaceWith = function(from, to, content) {\n  return this.replace(from, to, new Slice(Fragment.from(content), 0, 0))\n};\n\n// :: (number, number) → this\n// Delete the content between the given positions.\nTransform.prototype.delete = function(from, to) {\n  return this.replace(from, to, Slice.empty)\n};\n\n// :: (number, union<Fragment, Node, [Node]>) → this\n// Insert the given content at the given position.\nTransform.prototype.insert = function(pos, content) {\n  return this.replaceWith(pos, pos, content)\n};\n\n\n\nfunction fitLeftInner($from, depth, placed, placedBelow) {\n  var content = Fragment.empty, openEnd = 0, placedHere = placed[depth];\n  if ($from.depth > depth) {\n    var inner = fitLeftInner($from, depth + 1, placed, placedBelow || placedHere);\n    openEnd = inner.openEnd + 1;\n    content = Fragment.from($from.node(depth + 1).copy(inner.content));\n  }\n\n  if (placedHere) {\n    content = content.append(placedHere.content);\n    openEnd = placedHere.openEnd;\n  }\n  if (placedBelow) {\n    content = content.append($from.node(depth).contentMatchAt($from.indexAfter(depth)).fillBefore(Fragment.empty, true));\n    openEnd = 0;\n  }\n\n  return {content: content, openEnd: openEnd}\n}\n\nfunction fitLeft($from, placed) {\n  var ref = fitLeftInner($from, 0, placed, false);\n  var content = ref.content;\n  var openEnd = ref.openEnd;\n  return new Slice(content, $from.depth, openEnd || 0)\n}\n\nfunction fitRightJoin(content, parent, $from, $to, depth, openStart, openEnd) {\n  var match, count = content.childCount, matchCount = count - (openEnd > 0 ? 1 : 0);\n  var parentNode = openStart < 0 ? parent : $from.node(depth);\n  if (openStart < 0)\n    { match = parentNode.contentMatchAt(matchCount); }\n  else if (count == 1 && openEnd > 0)\n    { match = parentNode.contentMatchAt(openStart ? $from.index(depth) : $from.indexAfter(depth)); }\n  else\n    { match = parentNode.contentMatchAt($from.indexAfter(depth))\n      .matchFragment(content, count > 0 && openStart ? 1 : 0, matchCount); }\n\n  var toNode = $to.node(depth);\n  if (openEnd > 0 && depth < $to.depth) {\n    var after = toNode.content.cutByIndex($to.indexAfter(depth)).addToStart(content.lastChild);\n    var joinable$1 = match.fillBefore(after, true);\n    // Can't insert content if there's a single node stretched across this gap\n    if (joinable$1 && joinable$1.size && openStart > 0 && count == 1) { joinable$1 = null; }\n\n    if (joinable$1) {\n      var inner = fitRightJoin(content.lastChild.content, content.lastChild, $from, $to,\n                               depth + 1, count == 1 ? openStart - 1 : -1, openEnd - 1);\n      if (inner) {\n        var last = content.lastChild.copy(inner);\n        if (joinable$1.size)\n          { return content.cutByIndex(0, count - 1).append(joinable$1).addToEnd(last) }\n        else\n          { return content.replaceChild(count - 1, last) }\n      }\n    }\n  }\n  if (openEnd > 0)\n    { match = match.matchType((count == 1 && openStart > 0 ? $from.node(depth + 1) : content.lastChild).type); }\n\n  // If we're here, the next level can't be joined, so we see what\n  // happens if we leave it open.\n  var toIndex = $to.index(depth);\n  if (toIndex == toNode.childCount && !toNode.type.compatibleContent(parent.type)) { return null }\n  var joinable = match.fillBefore(toNode.content, true, toIndex);\n  for (var i = toIndex; joinable && i < toNode.content.childCount; i++)\n    { if (!parentNode.type.allowsMarks(toNode.content.child(i).marks)) { joinable = null; } }\n  if (!joinable) { return null }\n\n  if (openEnd > 0) {\n    var closed = fitRightClosed(content.lastChild, openEnd - 1, $from, depth + 1,\n                                count == 1 ? openStart - 1 : -1);\n    content = content.replaceChild(count - 1, closed);\n  }\n  content = content.append(joinable);\n  if ($to.depth > depth)\n    { content = content.addToEnd(fitRightSeparate($to, depth + 1)); }\n  return content\n}\n\nfunction fitRightClosed(node, openEnd, $from, depth, openStart) {\n  var match, content = node.content, count = content.childCount;\n  if (openStart >= 0)\n    { match = $from.node(depth).contentMatchAt($from.indexAfter(depth))\n      .matchFragment(content, openStart > 0 ? 1 : 0, count); }\n  else\n    { match = node.contentMatchAt(count); }\n\n  if (openEnd > 0) {\n    var closed = fitRightClosed(content.lastChild, openEnd - 1, $from, depth + 1,\n                                count == 1 ? openStart - 1 : -1);\n    content = content.replaceChild(count - 1, closed);\n  }\n\n  return node.copy(content.append(match.fillBefore(Fragment.empty, true)))\n}\n\nfunction fitRightSeparate($to, depth) {\n  var node = $to.node(depth);\n  var fill = node.contentMatchAt(0).fillBefore(node.content, true, $to.index(depth));\n  if ($to.depth > depth) { fill = fill.addToEnd(fitRightSeparate($to, depth + 1)); }\n  return node.copy(fill)\n}\n\nfunction normalizeSlice(content, openStart, openEnd) {\n  while (openStart > 0 && openEnd > 0 && content.childCount == 1) {\n    content = content.firstChild.content;\n    openStart--;\n    openEnd--;\n  }\n  return new Slice(content, openStart, openEnd)\n}\n\n// : (ResolvedPos, ResolvedPos, number, Slice) → Slice\nfunction fitRight($from, $to, slice) {\n  var fitted = fitRightJoin(slice.content, $from.node(0), $from, $to, 0, slice.openStart, slice.openEnd);\n  if (!fitted) { return null }\n  return normalizeSlice(fitted, slice.openStart, $to.depth)\n}\n\nfunction fitsTrivially($from, $to, slice) {\n  return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&\n    $from.parent.canReplace($from.index(), $to.index(), slice.content)\n}\n\nfunction canMoveText($from, $to, slice) {\n  if (!$to.parent.isTextblock) { return false }\n\n  var parent = slice.openEnd ? nodeRight(slice.content, slice.openEnd)\n      : $from.node($from.depth - (slice.openStart - slice.openEnd));\n  if (!parent.isTextblock) { return false }\n  for (var i = $to.index(); i < $to.parent.childCount; i++)\n    { if (!parent.type.allowsMarks($to.parent.child(i).marks)) { return false } }\n  var match;\n  if (slice.openEnd) {\n    match = parent.contentMatchAt(parent.childCount);\n  } else {\n    match = parent.contentMatchAt(parent.childCount);\n    if (slice.size) { match = match.matchFragment(slice.content, slice.openStart ? 1 : 0); }\n  }\n  match = match.matchFragment($to.parent.content, $to.index());\n  return match && match.validEnd\n}\n\nfunction nodeRight(content, depth) {\n  for (var i = 1; i < depth; i++) { content = content.lastChild.content; }\n  return content.lastChild\n}\n\n// Algorithm for 'placing' the elements of a slice into a gap:\n//\n// We consider the content of each node that is open to the left to be\n// independently placeable. I.e. in <p(\"foo\"), p(\"bar\")>, when the\n// paragraph on the left is open, \"foo\" can be placed (somewhere on\n// the left side of the replacement gap) independently from p(\"bar\").\n//\n// So placeSlice splits up a slice into a number of sub-slices,\n// along with information on where they can be placed on the given\n// left-side edge. It works by walking the open side of the slice,\n// from the inside out, and trying to find a landing spot for each\n// element, by simultaneously scanning over the gap side. When no\n// place is found for an open node's content, it is left in that node.\n\n// : (ResolvedPos, Slice) → [{content: Fragment, openEnd: number, depth: number}]\nfunction placeSlice($from, slice) {\n  var frontier = new Frontier($from);\n  for (var pass = 1; slice.size && pass <= 3; pass++) {\n    var value = frontier.placeSlice(slice.content, slice.openStart, slice.openEnd, pass);\n    if (pass == 3 && value != slice && value.size) { pass = 0; } // Restart if the 3rd pass made progress but left content\n    slice = value;\n  }\n  while (frontier.open.length) { frontier.closeNode(); }\n  return frontier.placed\n}\n\n// Helper class that models the open side of the insert position,\n// keeping track of the content match and already inserted content\n// at each depth.\nvar Frontier = function Frontier($pos) {\n  // : [{parent: Node, match: ContentMatch, content: Fragment, wrapper: bool, openEnd: number, depth: number}]\n  this.open = [];\n  for (var d = 0; d <= $pos.depth; d++) {\n    var parent = $pos.node(d), match = parent.contentMatchAt($pos.indexAfter(d));\n    this.open.push({parent: parent, match: match, content: Fragment.empty, wrapper: false, openEnd: 0, depth: d});\n  }\n  this.placed = [];\n};\n\n// : (Fragment, number, number, number, ?Node) → Slice\n// Tries to place the content of the given slice, and returns a\n// slice containing unplaced content.\n//\n// pass 1: try to fit directly\n// pass 2: allow wrapper nodes to be introduced\n// pass 3: allow unwrapping of nodes that aren't open\nFrontier.prototype.placeSlice = function placeSlice (fragment, openStart, openEnd, pass, parent) {\n  if (openStart > 0) {\n    var first = fragment.firstChild;\n    var inner = this.placeSlice(first.content, Math.max(0, openStart - 1),\n                                openEnd && fragment.childCount == 1 ? openEnd - 1 : 0,\n                                pass, first);\n    if (inner.content != first.content) {\n      if (inner.content.size) {\n        fragment = fragment.replaceChild(0, first.copy(inner.content));\n        openStart = inner.openStart + 1;\n      } else {\n        if (fragment.childCount == 1) { openEnd = 0; }\n        fragment = fragment.cutByIndex(1);\n        openStart = 0;\n      }\n    }\n  }\n  var result = this.placeContent(fragment, openStart, openEnd, pass, parent);\n  if (pass > 2 && result.size && openStart == 0) {\n    var child = result.content.firstChild, single = result.content.childCount == 1;\n    this.placeContent(child.content, 0, openEnd && single ? openEnd - 1 : 0, pass, child);\n    result = single ? Fragment.empty : new Slice(result.content.cutByIndex(1), 0, openEnd);\n  }\n  return result\n};\n\nFrontier.prototype.placeContent = function placeContent (fragment, openStart, openEnd, pass, parent) {\n  var i = 0;\n  // Go over the fragment's children\n  for (; i < fragment.childCount; i++) {\n    var child = fragment.child(i), placed = false, last = i == fragment.childCount - 1;\n    // Try each open node in turn, starting from the innermost\n    for (var d = this.open.length - 1; d >= 0; d--) {\n      var open = this.open[d], wrap = (void 0);\n\n      // If pass > 1, it is allowed to wrap the node to help find a\n      // fit, so if findWrapping returns something, we add open\n      // nodes to the frontier for that wrapping.\n      if (pass > 1 && (wrap = open.match.findWrapping(child.type)) &&\n          !(parent && wrap.length && wrap[wrap.length - 1] == parent.type)) {\n        while (this.open.length - 1 > d) { this.closeNode(); }\n        for (var w = 0; w < wrap.length; w++) {\n          open.match = open.match.matchType(wrap[w]);\n          d++;\n          open = {parent: wrap[w].create(),\n                  match: wrap[w].contentMatch,\n                  content: Fragment.empty, wrapper: true, openEnd: 0, depth: d + w};\n          this.open.push(open);\n        }\n      }\n\n      // See if the child fits here\n      var match = open.match.matchType(child.type);\n      if (!match) {\n        var fill = open.match.fillBefore(Fragment.from(child));\n        if (fill) {\n          for (var j = 0; j < fill.childCount; j++) {\n            var ch = fill.child(j);\n            this.addNode(open, ch, 0);\n            match = open.match.matchFragment(ch);\n          }\n        } else if (parent && open.match.matchType(parent.type)) {\n          // Don't continue looking further up if the parent node\n          // would fit here.\n          break\n        } else {\n          continue\n        }\n      }\n\n      // Close open nodes above this one, since we're starting to\n      // add to this.\n      while (this.open.length - 1 > d) { this.closeNode(); }\n      // Strip marks from the child or close its start when necessary\n      child = child.mark(open.parent.type.allowedMarks(child.marks));\n      if (openStart) {\n        child = closeNodeStart(child, openStart, last ? openEnd : 0);\n        openStart = 0;\n      }\n      // Add the child to this open node and adjust its metadata\n      this.addNode(open, child, last ? openEnd : 0);\n      open.match = match;\n      if (last) { openEnd = 0; }\n      placed = true;\n      break\n    }\n    // As soon as we've failed to place a node we stop looking at\n    // later nodes\n    if (!placed) { break }\n  }\n  // Close the current open node if it's not the the root and we\n  // either placed up to the end of the node or the the current\n  // slice depth's node type matches the open node's type\n  if (this.open.length > 1 &&\n      (i > 0 && i == fragment.childCount ||\n       parent && this.open[this.open.length - 1].parent.type == parent.type))\n    { this.closeNode(); }\n\n  return new Slice(fragment.cutByIndex(i), openStart, openEnd)\n};\n\nFrontier.prototype.addNode = function addNode (open, node, openEnd) {\n  open.content = closeFragmentEnd(open.content, open.openEnd).addToEnd(node);\n  open.openEnd = openEnd;\n};\n\nFrontier.prototype.closeNode = function closeNode () {\n  var open = this.open.pop();\n  if (open.content.size == 0) ; else if (open.wrapper) {\n    this.addNode(this.open[this.open.length - 1], open.parent.copy(open.content), open.openEnd + 1);\n  } else {\n    this.placed[open.depth] = {depth: open.depth, content: open.content, openEnd: open.openEnd};\n  }\n};\n\nfunction closeNodeStart(node, openStart, openEnd) {\n  var content = node.content;\n  if (openStart > 1) {\n    var first = closeNodeStart(node.firstChild, openStart - 1, node.childCount == 1 ? openEnd - 1 : 0);\n    content = node.content.replaceChild(0, first);\n  }\n  var fill = node.type.contentMatch.fillBefore(content, openEnd == 0);\n  return node.copy(fill.append(content))\n}\n\nfunction closeNodeEnd(node, depth) {\n  var content = node.content;\n  if (depth > 1) {\n    var last = closeNodeEnd(node.lastChild, depth - 1);\n    content = node.content.replaceChild(node.childCount - 1, last);\n  }\n  var fill = node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true);\n  return node.copy(content.append(fill))\n}\n\nfunction closeFragmentEnd(fragment, depth) {\n  return depth ? fragment.replaceChild(fragment.childCount - 1, closeNodeEnd(fragment.lastChild, depth)) : fragment\n}\n\n// :: (number, number, Slice) → this\n// Replace a range of the document with a given slice, using `from`,\n// `to`, and the slice's [`openStart`](#model.Slice.openStart) property\n// as hints, rather than fixed start and end points. This method may\n// grow the replaced area or close open nodes in the slice in order to\n// get a fit that is more in line with WYSIWYG expectations, by\n// dropping fully covered parent nodes of the replaced region when\n// they are marked [non-defining](#model.NodeSpec.defining), or\n// including an open parent node from the slice that _is_ marked as\n// [defining](#model.NodeSpec.defining).\n//\n// This is the method, for example, to handle paste. The similar\n// [`replace`](#transform.Transform.replace) method is a more\n// primitive tool which will _not_ move the start and end of its given\n// range, and is useful in situations where you need more precise\n// control over what happens.\nTransform.prototype.replaceRange = function(from, to, slice) {\n  if (!slice.size) { return this.deleteRange(from, to) }\n\n  var $from = this.doc.resolve(from), $to = this.doc.resolve(to);\n  if (fitsTrivially($from, $to, slice))\n    { return this.step(new ReplaceStep(from, to, slice)) }\n\n  var targetDepths = coveredDepths($from, this.doc.resolve(to));\n  // Can't replace the whole document, so remove 0 if it's present\n  if (targetDepths[targetDepths.length - 1] == 0) { targetDepths.pop(); }\n  // Negative numbers represent not expansion over the whole node at\n  // that depth, but replacing from $from.before(-D) to $to.pos.\n  var preferredTarget = -($from.depth + 1);\n  targetDepths.unshift(preferredTarget);\n  // This loop picks a preferred target depth, if one of the covering\n  // depths is not outside of a defining node, and adds negative\n  // depths for any depth that has $from at its start and does not\n  // cross a defining node.\n  for (var d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {\n    var spec = $from.node(d).type.spec;\n    if (spec.defining || spec.isolating) { break }\n    if (targetDepths.indexOf(d) > -1) { preferredTarget = d; }\n    else if ($from.before(d) == pos) { targetDepths.splice(1, 0, -d); }\n  }\n  // Try to fit each possible depth of the slice into each possible\n  // target depth, starting with the preferred depths.\n  var preferredTargetIndex = targetDepths.indexOf(preferredTarget);\n\n  var leftNodes = [], preferredDepth = slice.openStart;\n  for (var content = slice.content, i = 0;; i++) {\n    var node = content.firstChild;\n    leftNodes.push(node);\n    if (i == slice.openStart) { break }\n    content = node.content;\n  }\n  // Back up if the node directly above openStart, or the node above\n  // that separated only by a non-defining textblock node, is defining.\n  if (preferredDepth > 0 && leftNodes[preferredDepth - 1].type.spec.defining &&\n      $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 1].type)\n    { preferredDepth -= 1; }\n  else if (preferredDepth >= 2 && leftNodes[preferredDepth - 1].isTextblock && leftNodes[preferredDepth - 2].type.spec.defining &&\n           $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 2].type)\n    { preferredDepth -= 2; }\n\n  for (var j = slice.openStart; j >= 0; j--) {\n    var openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);\n    var insert = leftNodes[openDepth];\n    if (!insert) { continue }\n    for (var i$1 = 0; i$1 < targetDepths.length; i$1++) {\n      // Loop over possible expansion levels, starting with the\n      // preferred one\n      var targetDepth = targetDepths[(i$1 + preferredTargetIndex) % targetDepths.length], expand = true;\n      if (targetDepth < 0) { expand = false; targetDepth = -targetDepth; }\n      var parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);\n      if (parent.canReplaceWith(index, index, insert.type, insert.marks))\n        { return this.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to,\n                            new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth),\n                                      openDepth, slice.openEnd)) }\n    }\n  }\n\n  var startSteps = this.steps.length;\n  for (var i$2 = targetDepths.length - 1; i$2 >= 0; i$2--) {\n    this.replace(from, to, slice);\n    if (this.steps.length > startSteps) { break }\n    var depth = targetDepths[i$2];\n    if (i$2 < 0) { continue }\n    from = $from.before(depth); to = $to.after(depth);\n  }\n  return this\n};\n\nfunction closeFragment(fragment, depth, oldOpen, newOpen, parent) {\n  if (depth < oldOpen) {\n    var first = fragment.firstChild;\n    fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));\n  }\n  if (depth > newOpen) {\n    var match = parent.contentMatchAt(0);\n    var start = match.fillBefore(fragment).append(fragment);\n    fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true));\n  }\n  return fragment\n}\n\n// :: (number, number, Node) → this\n// Replace the given range with a node, but use `from` and `to` as\n// hints, rather than precise positions. When from and to are the same\n// and are at the start or end of a parent node in which the given\n// node doesn't fit, this method may _move_ them out towards a parent\n// that does allow the given node to be placed. When the given range\n// completely covers a parent node, this method may completely replace\n// that parent node.\nTransform.prototype.replaceRangeWith = function(from, to, node) {\n  if (!node.isInline && from == to && this.doc.resolve(from).parent.content.size) {\n    var point = insertPoint(this.doc, from, node.type);\n    if (point != null) { from = to = point; }\n  }\n  return this.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0))\n};\n\n// :: (number, number) → this\n// Delete the given range, expanding it to cover fully covered\n// parent nodes until a valid replace is found.\nTransform.prototype.deleteRange = function(from, to) {\n  var $from = this.doc.resolve(from), $to = this.doc.resolve(to);\n  var covered = coveredDepths($from, $to);\n  for (var i = 0; i < covered.length; i++) {\n    var depth = covered[i], last = i == covered.length - 1;\n    if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)\n      { return this.delete($from.start(depth), $to.end(depth)) }\n    if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))\n      { return this.delete($from.before(depth), $to.after(depth)) }\n  }\n  for (var d = 1; d <= $from.depth && d <= $to.depth; d++) {\n    if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)\n      { return this.delete($from.before(d), to) }\n  }\n  return this.delete(from, to)\n};\n\n// : (ResolvedPos, ResolvedPos) → [number]\n// Returns an array of all depths for which $from - $to spans the\n// whole content of the nodes at that depth.\nfunction coveredDepths($from, $to) {\n  var result = [], minDepth = Math.min($from.depth, $to.depth);\n  for (var d = minDepth; d >= 0; d--) {\n    var start = $from.start(d);\n    if (start < $from.pos - ($from.depth - d) ||\n        $to.end(d) > $to.pos + ($to.depth - d) ||\n        $from.node(d).type.spec.isolating ||\n        $to.node(d).type.spec.isolating) { break }\n    if (start == $to.start(d)) { result.push(d); }\n  }\n  return result\n}\n\nexport { AddMarkStep, MapResult, Mapping, RemoveMarkStep, ReplaceAroundStep, ReplaceStep, Step, StepMap, StepResult, Transform, TransformError, canJoin, canSplit, dropPoint, findWrapping, insertPoint, joinPoint, liftTarget, replaceStep };\n//# sourceMappingURL=index.es.js.map\n","import { Transform, ReplaceStep } from \"prosemirror-transform\";\nimport { applyPatch, createPatch } from \"rfc6902\";\nimport { diffWordsWithSpace, diffChars } from \"diff\";\nconst cp = (v) => JSON.parse(JSON.stringify(v));\nfunction getReplaceStep(fromDoc, toDoc) {\n    let start = toDoc.content.findDiffStart(fromDoc.content);\n    if (start === null) {\n        return false;\n    }\n    let { a: endA, b: endB } = toDoc.content.findDiffEnd(fromDoc.content);\n    const overlap = start - Math.min(endA, endB);\n    if (overlap > 0) {\n        // If there is an overlap, there is some freedom of choice in how to calculate the\n        // start/end boundary. for an inserted/removed slice. We choose the extreme with\n        // the lowest depth value.\n        if (fromDoc.resolve(start - overlap).depth < toDoc.resolve(endA + overlap).depth) {\n            start -= overlap;\n        }\n        else {\n            endA += overlap;\n            endB += overlap;\n        }\n    }\n    return new ReplaceStep(start, endB, toDoc.slice(start, endA));\n}\nexport class RecreateTransform {\n    constructor(fromDoc, toDoc, options = {}) {\n        const o = Object.assign({ complexSteps: true, wordDiffs: false }, options);\n        this.fromDoc = fromDoc;\n        this.toDoc = toDoc;\n        this.complexSteps = o.complexSteps; // Whether to return steps other than ReplaceSteps\n        this.wordDiffs = o.wordDiffs; // Whether to make text diffs cover entire words\n        this.schema = fromDoc.type.schema;\n        this.tr = new Transform(fromDoc);\n    }\n    init() {\n        if (this.complexSteps) {\n            // For First steps: we create versions of the documents without marks as\n            // these will only confuse the diffing mechanism and marks won't cause\n            // any mapping changes anyway.\n            this.currentJSON = this.marklessDoc(this.fromDoc).toJSON();\n            this.finalJSON = this.marklessDoc(this.toDoc).toJSON();\n            this.ops = createPatch(this.currentJSON, this.finalJSON);\n            this.recreateChangeContentSteps();\n            this.recreateChangeMarkSteps();\n        }\n        else {\n            // We don't differentiate between mark changes and other changes.\n            this.currentJSON = this.fromDoc.toJSON();\n            this.finalJSON = this.toDoc.toJSON();\n            this.ops = createPatch(this.currentJSON, this.finalJSON);\n            this.recreateChangeContentSteps();\n        }\n        this.simplifyTr();\n        return this.tr;\n    }\n    /** convert json-diff to prosemirror steps */\n    recreateChangeContentSteps() {\n        // First step: find content changing steps.\n        let ops = [];\n        while (this.ops.length) {\n            let toDoc;\n            let op = this.ops.shift();\n            const afterStepJSON = cp(this.currentJSON);\n            const pathParts = op.path.split(\"/\");\n            ops.push(op);\n            // collect operations until we receive a valid document\n            while (toDoc == null) {\n                applyPatch(afterStepJSON, [op]);\n                try {\n                    toDoc = this.schema.nodeFromJSON(afterStepJSON);\n                    toDoc.check();\n                }\n                catch (error) {\n                    toDoc = null;\n                    if (this.ops.length > 0) {\n                        op = this.ops.shift();\n                        ops.push(op);\n                    }\n                    else {\n                        throw new Error(`No valid diff possible applying ${op.path}`);\n                    }\n                }\n            }\n            // console.log(\"op to step\", ops);\n            // apply the set of operations\n            if (this.complexSteps && ops.length === 1 && (pathParts.includes(\"attrs\") || pathParts.includes(\"type\"))) {\n                // Node markup is changing\n                this.addSetNodeMarkup();\n                ops = [];\n            }\n            else if (ops.length === 1 && op.op === \"replace\" && pathParts[pathParts.length - 1] === \"text\") {\n                // Text is being replaced, we apply text diffing to find the smallest possible diffs.\n                this.addReplaceTextSteps(op, afterStepJSON);\n                ops = [];\n            }\n            else if (this.addReplaceStep(toDoc, afterStepJSON)) {\n                ops = [];\n            }\n        }\n    }\n    recreateChangeMarkSteps() {\n        // Now the documents should be the same, except their marks, so everything should map 1:1.\n        // Second step: Iterate through the toDoc and make sure all marks are the same in tr.doc\n        this.toDoc.descendants((tNode, tPos) => {\n            if (!tNode.isInline) {\n                return true;\n            }\n            this.tr.doc.nodesBetween(tPos, tPos + tNode.nodeSize, (fNode, fPos) => {\n                if (!fNode.isInline) {\n                    return true;\n                }\n                const from = Math.max(tPos, fPos), to = Math.min(tPos + tNode.nodeSize, fPos + fNode.nodeSize);\n                fNode.marks.forEach(nodeMark => {\n                    if (!nodeMark.isInSet(tNode.marks)) {\n                        this.tr.removeMark(from, to, nodeMark);\n                    }\n                });\n                tNode.marks.forEach(nodeMark => {\n                    if (!nodeMark.isInSet(fNode.marks)) {\n                        this.tr.addMark(from, to, nodeMark);\n                    }\n                });\n            });\n        });\n    }\n    marklessDoc(doc) {\n        const tr = new Transform(doc);\n        tr.removeMark(0, doc.nodeSize - 2);\n        return tr.doc;\n    }\n    // From http://prosemirror.net/examples/footnote/\n    addReplaceStep(toDoc, afterStepJSON) {\n        const fromDoc = this.schema.nodeFromJSON(this.currentJSON);\n        const step = getReplaceStep(fromDoc, toDoc);\n        if (!step) {\n            return false;\n        }\n        else if (!this.tr.maybeStep(step).failed) {\n            this.currentJSON = afterStepJSON;\n            return true; // @change previously null\n        }\n        throw new Error(\"No valid step found.\");\n    }\n    /** update node with attrs and marks, may also change type */\n    addSetNodeMarkup() {\n        const fromDoc = this.schema.nodeFromJSON(this.currentJSON);\n        const toDoc = this.schema.nodeFromJSON(this.finalJSON);\n        const start = toDoc.content.findDiffStart(fromDoc.content);\n        const fromNode = fromDoc.nodeAt(start);\n        const toNode = toDoc.nodeAt(start);\n        if (start != null) {\n            // @todo test this usecase\n            this.tr.setNodeMarkup(start, fromNode.type === toNode.type ? null : toNode.type, toNode.attrs, toNode.marks);\n            this.currentJSON = this.marklessDoc(this.tr.doc).toJSON();\n            // Setting the node markup may have invalidated more ops, so we calculate them again.\n            this.ops = createPatch(this.currentJSON, this.finalJSON);\n        }\n    }\n    /** perform text diff */\n    addReplaceTextSteps(op, afterStepJSON) {\n        // We find the position number of the first character in the string\n        const op1 = Object.assign(Object.assign({}, op), { value: \"xx\" });\n        const op2 = Object.assign(Object.assign({}, op), { value: \"yy\" });\n        const afterOP1JSON = cp(this.currentJSON);\n        const afterOP2JSON = cp(this.currentJSON);\n        const pathParts = op.path.split(\"/\");\n        let obj = this.currentJSON;\n        applyPatch(afterOP1JSON, [op1]);\n        applyPatch(afterOP2JSON, [op2]);\n        const op1Doc = this.schema.nodeFromJSON(afterOP1JSON);\n        const op2Doc = this.schema.nodeFromJSON(afterOP2JSON);\n        let offset = op1Doc.content.findDiffStart(op2Doc.content);\n        const marks = op1Doc.resolve(offset + 1).marks();\n        pathParts.shift();\n        while (pathParts.length) {\n            const pathPart = pathParts.shift();\n            obj = obj[pathPart];\n        }\n        const finalText = op.value;\n        const currentText = obj;\n        const textDiffs = this.wordDiffs ?\n            diffWordsWithSpace(currentText, finalText) :\n            diffChars(currentText, finalText);\n        while (textDiffs.length) {\n            const diff = textDiffs.shift();\n            if (diff.added) {\n                if (textDiffs.length && textDiffs[0].removed) {\n                    const nextDiff = textDiffs.shift();\n                    this.tr.replaceWith(offset, offset + nextDiff.value.length, this.schema.nodeFromJSON({ type: \"text\", text: diff.value }).mark(marks));\n                }\n                else {\n                    this.tr.insert(offset, this.schema.nodeFromJSON({ type: \"text\", text: diff.value }).mark(marks));\n                }\n                offset += diff.value.length;\n            }\n            else if (diff.removed) {\n                if (textDiffs.length && textDiffs[0].added) {\n                    const nextDiff = textDiffs.shift();\n                    this.tr.replaceWith(offset, offset + diff.value.length, this.schema.nodeFromJSON({ type: \"text\", text: nextDiff.value }).mark(marks));\n                    offset += nextDiff.value.length;\n                }\n                else {\n                    this.tr.delete(offset, offset + diff.value.length);\n                }\n            }\n            else {\n                offset += diff.value.length;\n            }\n        }\n        this.currentJSON = afterStepJSON;\n    }\n    // join adjacent ReplaceSteps\n    simplifyTr() {\n        if (!this.tr.steps.length) {\n            return;\n        }\n        const newTr = new Transform(this.tr.docs[0]);\n        const oldSteps = this.tr.steps.slice();\n        while (oldSteps.length) {\n            let step = oldSteps.shift();\n            while (oldSteps.length && step.merge(oldSteps[0])) {\n                const addedStep = oldSteps.shift();\n                if (step instanceof ReplaceStep && addedStep instanceof ReplaceStep) {\n                    step = getReplaceStep(newTr.doc, addedStep.apply(step.apply(newTr.doc).doc).doc);\n                }\n                else {\n                    step = step.merge(addedStep);\n                }\n            }\n            newTr.step(step);\n        }\n        this.tr = newTr;\n    }\n}\nexport function recreateTransform(fromDoc, toDoc, options = {}) {\n    const recreator = new RecreateTransform(fromDoc, toDoc, options);\n    return recreator.init();\n}\n"],"sourceRoot":""}